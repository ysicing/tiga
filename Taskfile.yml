version: '3'

tasks:

  gofmt:
    cmds:
      - go install golang.org/x/tools/cmd/goimports@latest
      - gofmt -s -w .
      - goimports -w .

  golint:
    cmds:
      - command -v golangci-lint || go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - golangci-lint run -v ./...

  gci:
    cmds:
      - command -v gci || go install github.com/daixiang0/gci@v0.13.1
      - gci write --skip-generated --custom-order -s standard -s default -s "prefix(github.com/ysicing/tiga)" -s blank -s dot -s alias .

  gomod:
    cmds:
      - go mod tidy

  wire:
    desc: generate wire dependency injection code
    cmds:
      - command -v wire || go install github.com/google/wire/cmd/wire@latest
      - cd internal/app && wire
    sources:
      - internal/app/wire.go
      - internal/app/app.go
    generates:
      - internal/app/wire_gen.go

  swagger:
    desc: generate Swagger API documentation
    cmds:
      - command -v swag || go install github.com/swaggo/swag/cmd/swag@latest
      - ./scripts/generate-swagger.sh
    sources:
      - cmd/tiga/main.go
      - internal/api/handlers/**/*.go
      - pkg/handlers/**/*.go
    generates:
      - docs/swagger/swagger.json
      - docs/swagger/swagger.yaml

  lint:
    desc: lint code
    cmds:
      - task: gomod
      - task: gofmt
      - task: gci
      # - task: golint

  web:
    desc: build web
    deps:
      - clean
    dir: ui
    cmds:
      - pnpm install --frozen-lockfile
      - pnpm run build
    status:
      - test -f ../static/index.html

  backend:
    desc: build backend
    deps:
      - web
      - wire
    cmds:
      - go mod tidy
      - |
        eval "$(bash scripts/version.sh)"
        go build -ldflags "\
          -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
          -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
          -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga cmd/tiga/main.go

  agent:
    desc: build agent
    cmds:
      - go mod tidy
      - |
        eval "$(bash scripts/version.sh)"
        go build -ldflags "\
          -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
          -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
          -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-agent ./cmd/tiga-agent

  all:
    desc: build all (backend + agent)
    cmds:
      - task: backend
      - task: agent

  cross-compile:
    desc: cross compile server
    deps:
      - web
    cmds:
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-amd64 cmd/tiga/main.go
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-arm64 cmd/tiga/main.go

  agent-cross:
    desc: cross compile agent for multiple platforms
    cmds:
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-agent-linux-amd64 ./cmd/tiga-agent
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-agent-linux-arm64 ./cmd/tiga-agent
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-agent-darwin-amd64 ./cmd/tiga-agent
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-agent-darwin-arm64 ./cmd/tiga-agent
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-agent-windows-amd64.exe ./cmd/tiga-agent
      - |
        eval "$(bash scripts/version.sh)"
        GOOS=windows GOARCH=arm64 CGO_ENABLED=0 go build -trimpath \
          -ldflags="-s -w \
            -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
            -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
            -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          -o bin/tiga-agent-windows-arm64.exe ./cmd/tiga-agent

  cross-all:
    desc: cross compile both server and agent
    cmds:
      - task: cross-compile
      - task: agent-cross

  clean:
    desc: clean
    cmds:
      - rm -rf bin/tiga* bin/*
      - rm -rf static/index.html
      - rm -rf static/assets
      - rm -f coverage.out coverage.html

  test:
    desc: run unit tests (skip integration tests that need Docker)
    cmds:
      - go test ./... -v -short -race -coverprofile=coverage.out -covermode=atomic
      - go tool cover -func=coverage.out | grep total | awk '{print "Total coverage:" $3}'

  test-integration:
    desc: run all tests including integration tests (requires Docker)
    cmds:
      - go test ./... -v -race -coverprofile=coverage.out -covermode=atomic
      - go tool cover -func=coverage.out | grep total | awk '{print "Total coverage:" $3}'

  test-report:
    desc: generate HTML coverage report
    deps:
      - test
    cmds:
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  docker:
    desc: build docker image with version injection
    cmds:
      - |
        eval "$(bash scripts/version.sh)"
        docker buildx build --pull --push --platform linux/amd64 \
          --build-arg VERSION=${VERSION} \
          --build-arg BUILD_TIME=${BUILD_TIME} \
          --build-arg COMMIT_ID=${COMMIT_ID} \
          -t ttl.sh/ysicing/tiga .

  dev:
    desc: run development server (all-in-one mode)
    deps:
      - web
      - wire
    cmds:
      - |
        eval "$(bash scripts/version.sh)"
        go run -ldflags "\
          -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
          -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
          -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          cmd/tiga/main.go

  dev:backend:
    desc: run backend API server only
    cmds:
      - |
        eval "$(bash scripts/version.sh)"
        go run -ldflags "\
          -X github.com/ysicing/tiga/internal/version.Version=${VERSION} \
          -X github.com/ysicing/tiga/internal/version.BuildTime=${BUILD_TIME} \
          -X github.com/ysicing/tiga/internal/version.CommitID=${COMMIT_ID}" \
          cmd/tiga/main.go

  dev:web:
    desc: run frontend development server (Vite hot reload)
    dir: ui
    cmds:
      - pnpm dev
