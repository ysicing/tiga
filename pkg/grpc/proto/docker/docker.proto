syntax = "proto3";

package docker;

option go_package = "github.com/ysicing/tiga/pkg/grpc/proto/docker";

// DockerService provides remote Docker management operations through Agent
service DockerService {
  // Docker daemon information
  rpc GetDockerInfo(GetDockerInfoRequest) returns (GetDockerInfoResponse);

  // Container operations
  rpc ListContainers(ListContainersRequest) returns (ListContainersResponse);
  rpc GetContainer(GetContainerRequest) returns (GetContainerResponse);
  rpc StartContainer(StartContainerRequest) returns (StartContainerResponse);
  rpc StopContainer(StopContainerRequest) returns (StopContainerResponse);
  rpc RestartContainer(RestartContainerRequest) returns (RestartContainerResponse);
  rpc PauseContainer(PauseContainerRequest) returns (PauseContainerResponse);
  rpc UnpauseContainer(UnpauseContainerRequest) returns (UnpauseContainerResponse);
  rpc DeleteContainer(DeleteContainerRequest) returns (DeleteContainerResponse);

  // Streaming operations
  rpc GetContainerStats(GetContainerStatsRequest) returns (stream ContainerStats);
  rpc GetContainerLogs(GetContainerLogsRequest) returns (stream LogEntry);
  rpc ExecContainer(stream ExecRequest) returns (stream ExecResponse);

  // Image operations
  rpc ListImages(ListImagesRequest) returns (ListImagesResponse);
  rpc GetImage(GetImageRequest) returns (GetImageResponse);
  rpc DeleteImage(DeleteImageRequest) returns (DeleteImageResponse);
  rpc PullImage(PullImageRequest) returns (stream PullImageProgress);
  rpc TagImage(TagImageRequest) returns (TagImageResponse);

  // Volume operations
  rpc ListVolumes(ListVolumesRequest) returns (ListVolumesResponse);
  rpc GetVolume(GetVolumeRequest) returns (GetVolumeResponse);
  rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse);
  rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse);
  rpc PruneVolumes(PruneVolumesRequest) returns (PruneVolumesResponse);

  // Network operations
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  rpc GetNetwork(GetNetworkRequest) returns (GetNetworkResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (CreateNetworkResponse);
  rpc DeleteNetwork(DeleteNetworkRequest) returns (DeleteNetworkResponse);
  rpc ConnectNetwork(ConnectNetworkRequest) returns (ConnectNetworkResponse);
  rpc DisconnectNetwork(DisconnectNetworkRequest) returns (DisconnectNetworkResponse);

  // System operations
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse);
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);
  rpc GetDiskUsage(GetDiskUsageRequest) returns (GetDiskUsageResponse);
  rpc Ping(PingRequest) returns (PingResponse);
  rpc GetEvents(GetEventsRequest) returns (stream DockerEvent);
}

// Docker daemon information
message GetDockerInfoRequest {}

message GetDockerInfoResponse {
  string version = 1;
  string api_version = 2;
  string min_api_version = 3;
  string git_commit = 4;
  string go_version = 5;
  string os = 6;
  string arch = 7;
  string kernel_version = 8;
  string storage_driver = 9;
  int32 containers = 10;
  int32 containers_running = 11;
  int32 containers_paused = 12;
  int32 containers_stopped = 13;
  int32 images = 14;
  int64 mem_total = 15;
  int32 n_cpu = 16;
  string operating_system = 17;
}

// Container listing
message ListContainersRequest {
  bool all = 1;               // Include stopped containers
  int32 limit = 2;            // Limit number of results (0 = no limit)
  string filters = 3;         // Docker filters in JSON format
  int32 page = 4;             // Page number (starting from 1)
  int32 page_size = 5;        // Items per page (default: 50)
}

message ListContainersResponse {
  repeated Container containers = 1;
  int32 total = 2;            // Total number of containers matching filter
  int32 page = 3;
  int32 page_size = 4;
}

message Container {
  string id = 1;              // Container ID (short 12 chars)
  repeated string names = 2;   // Container names
  string image = 3;           // Image name
  string image_id = 4;        // Image ID
  string command = 5;         // Command
  int64 created = 6;          // Creation timestamp
  string state = 7;           // Container state (created, running, paused, etc.)
  string status = 8;          // Status description
  repeated Port ports = 9;    // Port mappings
  map<string, string> labels = 10;
  int64 size_rw = 11;         // Writable layer size
  int64 size_root_fs = 12;    // Total size
  repeated Mount mounts = 13;
  map<string, NetworkConfig> networks = 14;
}

message Port {
  string ip = 1;
  int32 private_port = 2;
  int32 public_port = 3;
  string type = 4;            // tcp/udp
}

message Mount {
  string type = 1;            // bind, volume, tmpfs
  string source = 2;
  string destination = 3;
  string mode = 4;
  bool rw = 5;
  string propagation = 6;
}

message NetworkConfig {
  string network_id = 1;
  string endpoint_id = 2;
  string gateway = 3;
  string ip_address = 4;
  int32 ip_prefix_len = 5;
  string mac_address = 6;
}

// Get container details
message GetContainerRequest {
  string container_id = 1;
}

message GetContainerResponse {
  ContainerDetail container = 1;
}

message ContainerDetail {
  string id = 1;
  int64 created = 2;
  string path = 3;
  repeated string args = 4;
  ContainerState state = 5;
  string image = 6;
  string name = 7;
  int32 restart_count = 8;
  ContainerConfig config = 9;
  HostConfig host_config = 10;
  map<string, NetworkSettings> network_settings = 11;
  repeated Mount mounts = 12;
}

message ContainerState {
  string status = 1;
  bool running = 2;
  bool paused = 3;
  bool restarting = 4;
  bool oom_killed = 5;
  bool dead = 6;
  int32 pid = 7;
  int32 exit_code = 8;
  string error = 9;
  string started_at = 10;
  string finished_at = 11;
}

message ContainerConfig {
  string hostname = 1;
  string domainname = 2;
  string user = 3;
  bool attach_stdin = 4;
  bool attach_stdout = 5;
  bool attach_stderr = 6;
  map<string, bool> exposed_ports = 7;
  bool tty = 8;
  bool open_stdin = 9;
  bool stdin_once = 10;
  repeated string env = 11;
  repeated string cmd = 12;
  string image = 13;
  map<string, bool> volumes = 14;
  string working_dir = 15;
  repeated string entrypoint = 16;
  map<string, string> labels = 17;
}

message HostConfig {
  int64 cpu_shares = 1;
  int64 memory = 2;
  string cgroup_parent = 3;
  int32 blkio_weight = 4;
  repeated PortBinding port_bindings = 5;
  string restart_policy = 6;
  string network_mode = 7;
  bool privileged = 8;
  repeated string binds = 9;
  repeated string dns = 10;
}

message PortBinding {
  string host_ip = 1;
  string host_port = 2;
}

message NetworkSettings {
  string bridge = 1;
  string sandbox_id = 2;
  bool hairpin_mode = 3;
  string link_local_ipv6_address = 4;
  int32 link_local_ipv6_prefix_len = 5;
  string sandbox_key = 6;
  string endpoint_id = 7;
  string gateway = 8;
  string global_ipv6_address = 9;
  int32 global_ipv6_prefix_len = 10;
  string ip_address = 11;
  int32 ip_prefix_len = 12;
  string ipv6_gateway = 13;
  string mac_address = 14;
}

// Container lifecycle operations
message StartContainerRequest {
  string container_id = 1;
}

message StartContainerResponse {
  bool success = 1;
  string message = 2;
}

message StopContainerRequest {
  string container_id = 1;
  int32 timeout = 2;          // Stop timeout in seconds (default: 10)
}

message StopContainerResponse {
  bool success = 1;
  string message = 2;
}

message RestartContainerRequest {
  string container_id = 1;
  int32 timeout = 2;
}

message RestartContainerResponse {
  bool success = 1;
  string message = 2;
}

message PauseContainerRequest {
  string container_id = 1;
}

message PauseContainerResponse {
  bool success = 1;
  string message = 2;
}

message UnpauseContainerRequest {
  string container_id = 1;
}

message UnpauseContainerResponse {
  bool success = 1;
  string message = 2;
}

message DeleteContainerRequest {
  string container_id = 1;
  bool force = 2;             // Force remove running container
  bool remove_volumes = 3;    // Remove associated volumes
}

message DeleteContainerResponse {
  bool success = 1;
  string message = 2;
}

// Container stats (streaming)
message GetContainerStatsRequest {
  string container_id = 1;
  bool stream = 2;            // Continuous stream or one-shot
}

message ContainerStats {
  string container_id = 1;
  string name = 2;
  int64 timestamp = 3;

  // CPU stats
  CPUStats cpu_stats = 4;
  CPUStats precpu_stats = 5;

  // Memory stats
  MemoryStats memory_stats = 6;

  // Block I/O stats
  BlkioStats blkio_stats = 7;

  // Network stats
  map<string, NetworkStats> networks = 8;

  // PIDs
  PidsStats pids_stats = 9;
}

message CPUStats {
  uint64 cpu_usage_total = 1;
  repeated uint64 cpu_usage_percpu = 2;
  uint64 cpu_usage_in_kernelmode = 3;
  uint64 cpu_usage_in_usermode = 4;
  uint64 system_cpu_usage = 5;
  uint64 online_cpus = 6;
  uint64 throttling_periods = 7;
  uint64 throttled_periods = 8;
  uint64 throttled_time = 9;
}

message MemoryStats {
  uint64 usage = 1;
  uint64 max_usage = 2;
  uint64 limit = 3;
  uint64 commit = 4;
  uint64 commit_peak = 5;
  uint64 privateworkingset = 6;
}

message BlkioStats {
  repeated BlkioStatEntry io_service_bytes_recursive = 1;
  repeated BlkioStatEntry io_serviced_recursive = 2;
}

message BlkioStatEntry {
  uint64 major = 1;
  uint64 minor = 2;
  string op = 3;
  uint64 value = 4;
}

message NetworkStats {
  uint64 rx_bytes = 1;
  uint64 rx_packets = 2;
  uint64 rx_errors = 3;
  uint64 rx_dropped = 4;
  uint64 tx_bytes = 5;
  uint64 tx_packets = 6;
  uint64 tx_errors = 7;
  uint64 tx_dropped = 8;
}

message PidsStats {
  uint64 current = 1;
  uint64 limit = 2;
}

// Container logs (streaming)
message GetContainerLogsRequest {
  string container_id = 1;
  bool follow = 2;            // Stream logs
  bool stdout = 3;            // Include stdout (default: true)
  bool stderr = 4;            // Include stderr (default: true)
  int64 since = 5;            // Unix timestamp
  int64 until = 6;            // Unix timestamp
  bool timestamps = 7;        // Include timestamps
  string tail = 8;            // Number of lines from end ("all" or "100")
}

message LogEntry {
  int64 timestamp = 1;
  string stream = 2;          // stdout/stderr
  string log = 3;             // Log line
}

// Container exec (bidirectional streaming)
message ExecRequest {
  oneof request {
    ExecStart start = 1;
    ExecInput input = 2;
    ExecResize resize = 3;
  }
}

message ExecStart {
  string container_id = 1;
  repeated string cmd = 2;    // Command to execute (e.g., ["/bin/sh"])
  bool tty = 3;              // Allocate TTY
  bool attach_stdin = 4;
  bool attach_stdout = 5;
  bool attach_stderr = 6;
  map<string, string> env = 7; // Environment variables
}

message ExecInput {
  bytes data = 1;             // stdin input
}

message ExecResize {
  uint32 width = 1;           // Terminal width
  uint32 height = 2;          // Terminal height
}

message ExecResponse {
  oneof response {
    ExecOutput output = 1;
    ExecError error = 2;
    ExecExit exit = 3;
  }
}

message ExecOutput {
  bytes data = 1;             // stdout/stderr output
  string stream = 2;          // stdout/stderr
}

message ExecError {
  string message = 1;
}

message ExecExit {
  int32 exit_code = 1;
}

// Image operations
message ListImagesRequest {
  bool all = 1;               // Include intermediate images
  string filters = 2;         // Docker filters in JSON format
}

message ListImagesResponse {
  repeated Image images = 1;
}

message Image {
  string id = 1;              // Image ID (short 12 chars)
  repeated string repo_tags = 2;
  repeated string repo_digests = 3;
  string parent_id = 4;
  int64 created = 5;
  int64 size = 6;
  int64 virtual_size = 7;
  int64 shared_size = 8;
  map<string, string> labels = 9;
  int32 containers = 10;      // Number of containers using this image
}

message GetImageRequest {
  string image_id = 1;        // Image ID or name:tag
}

message GetImageResponse {
  ImageDetail image = 1;
}

message ImageDetail {
  string id = 1;
  repeated string repo_tags = 2;
  repeated string repo_digests = 3;
  string parent = 4;
  string comment = 5;
  int64 created = 6;
  string container = 7;
  ImageConfig config = 8;
  string docker_version = 9;
  string author = 10;
  string architecture = 11;
  string os = 12;
  int64 size = 13;
  int64 virtual_size = 14;
  RootFS root_fs = 15;
}

message ImageConfig {
  string hostname = 1;
  string domainname = 2;
  string user = 3;
  repeated string env = 4;
  repeated string cmd = 5;
  string image = 6;
  map<string, bool> volumes = 7;
  string working_dir = 8;
  repeated string entrypoint = 9;
  map<string, bool> exposed_ports = 10;
  map<string, string> labels = 11;
}

message RootFS {
  string type = 1;
  repeated string layers = 2;
  string base_layer = 3;
}

message DeleteImageRequest {
  string image_id = 1;
  bool force = 2;             // Force remove
  bool no_prune = 3;          // Don't delete untagged parents
}

message DeleteImageResponse {
  repeated ImageDeleteResponse deleted = 1;
}

message ImageDeleteResponse {
  string untagged = 1;
  string deleted = 2;
}

message PullImageRequest {
  string image = 1;           // Image name (e.g., "nginx:latest")
  string registry_auth = 2;   // Base64 encoded auth config
}

message PullImageProgress {
  string status = 1;          // Status message
  string progress = 2;        // Progress bar
  int64 current = 3;          // Current bytes
  int64 total = 4;            // Total bytes
  string id = 5;              // Layer ID
}

message TagImageRequest {
  string source = 1;          // Source image
  string target = 2;          // Target tag (repo:tag)
}

message TagImageResponse {
  bool success = 1;
  string message = 2;
}

// ==================== Volume Operations ====================

message ListVolumesRequest {}

message ListVolumesResponse {
  repeated Volume volumes = 1;
  repeated string warnings = 2;
}

message Volume {
  string name = 1;
  string driver = 2;
  string mountpoint = 3;
  int64 created_at = 4;
  string status = 5;
  map<string, string> labels = 6;
  string scope = 7;
  map<string, string> options = 8;
  VolumeUsageData usage_data = 9;
}

message VolumeUsageData {
  int64 size = 1;           // Size in bytes
  int64 ref_count = 2;      // Number of containers using this volume
}

message GetVolumeRequest {
  string name = 1;
}

message GetVolumeResponse {
  Volume volume = 1;
}

message CreateVolumeRequest {
  string name = 1;
  string driver = 2;         // Volume driver (default: "local")
  map<string, string> driver_opts = 3;
  map<string, string> labels = 4;
}

message CreateVolumeResponse {
  Volume volume = 1;
}

message DeleteVolumeRequest {
  string name = 1;
  bool force = 2;           // Force remove volume
}

message DeleteVolumeResponse {
  bool success = 1;
  string message = 2;
}

message PruneVolumesRequest {
  map<string, string> filters = 1;  // Optional filters
}

message PruneVolumesResponse {
  repeated string volumes_deleted = 1;
  uint64 space_reclaimed = 2;       // Space reclaimed in bytes
}

// ==================== Network Operations ====================

message ListNetworksRequest {
  string filters = 1;       // Docker filters in JSON format
}

message ListNetworksResponse {
  repeated Network networks = 1;
}

message Network {
  string id = 1;
  string name = 2;
  int64 created = 3;
  string scope = 4;         // local, swarm, global
  string driver = 5;
  bool enable_ipv6 = 6;
  IPAMConfig ipam = 7;
  bool internal = 8;
  bool attachable = 9;
  bool ingress = 10;
  map<string, NetworkContainer> containers = 11;
  map<string, string> options = 12;
  map<string, string> labels = 13;
}

message IPAMConfig {
  string driver = 1;
  repeated IPAMPool config = 2;
  map<string, string> options = 3;
}

message IPAMPool {
  string subnet = 1;
  string ip_range = 2;
  string gateway = 3;
  map<string, string> aux_addresses = 4;
}

message NetworkContainer {
  string name = 1;
  string endpoint_id = 2;
  string mac_address = 3;
  string ipv4_address = 4;
  string ipv6_address = 5;
}

message GetNetworkRequest {
  string network_id = 1;    // Network ID or name
  bool verbose = 2;
  string scope = 3;
}

message GetNetworkResponse {
  Network network = 1;
}

message CreateNetworkRequest {
  string name = 1;
  bool check_duplicate = 2;
  string driver = 3;
  bool internal = 4;
  bool attachable = 5;
  bool ingress = 6;
  IPAMConfig ipam = 7;
  bool enable_ipv6 = 8;
  map<string, string> options = 9;
  map<string, string> labels = 10;
}

message CreateNetworkResponse {
  string network_id = 1;
  string warning = 2;
}

message DeleteNetworkRequest {
  string network_id = 1;
}

message DeleteNetworkResponse {
  bool success = 1;
  string message = 2;
}

message ConnectNetworkRequest {
  string network_id = 1;
  string container_id = 2;
  EndpointConfig endpoint_config = 3;
}

message EndpointConfig {
  map<string, string> ipam_config = 1;
  repeated string links = 2;
  repeated string aliases = 3;
}

message ConnectNetworkResponse {
  bool success = 1;
  string message = 2;
}

message DisconnectNetworkRequest {
  string network_id = 1;
  string container_id = 2;
  bool force = 3;
}

message DisconnectNetworkResponse {
  bool success = 1;
  string message = 2;
}

// ==================== System Operations ====================

message GetSystemInfoRequest {}

message GetSystemInfoResponse {
  SystemInfo info = 1;
}

message SystemInfo {
  string id = 1;
  int32 containers = 2;
  int32 containers_running = 3;
  int32 containers_paused = 4;
  int32 containers_stopped = 5;
  int32 images = 6;
  string driver = 7;
  repeated DriverStatus driver_status = 8;
  string docker_root_dir = 9;
  map<string, string> system_status = 10;
  repeated Plugin plugins = 11;
  bool memory_limit = 12;
  bool swap_limit = 13;
  bool kernel_memory = 14;
  bool cpu_cfs_period = 15;
  bool cpu_cfs_quota = 16;
  bool cpu_shares = 17;
  bool cpu_set = 18;
  bool pids_limit = 19;
  bool ipv4_forwarding = 20;
  bool bridge_nf_iptables = 21;
  bool bridge_nf_ip6tables = 22;
  bool debug = 23;
  int32 n_fd = 24;
  bool oom_kill_disable = 25;
  int32 n_goroutines = 26;
  string system_time = 27;
  string logging_driver = 28;
  string cgroup_driver = 29;
  int32 n_events_listener = 30;
  string kernel_version = 31;
  string operating_system = 32;
  string os_type = 33;
  string architecture = 34;
  int32 ncpu = 35;
  int64 mem_total = 36;
  string index_server_address = 37;
  RegistryConfig registry_config = 38;
  repeated string warnings = 39;
}

message Plugin {
  string type = 1;
  string name = 2;
}

message DriverStatus {
  string name = 1;
  string value = 2;
}

message RegistryConfig {
  repeated string insecure_registry_cidrs = 1;
  repeated string index_configs = 2;
  repeated string mirrors = 3;
}

message GetVersionRequest {}

message GetVersionResponse {
  VersionInfo version = 1;
}

message VersionInfo {
  string version = 1;
  string api_version = 2;
  string min_api_version = 3;
  string git_commit = 4;
  string go_version = 5;
  string os = 6;
  string arch = 7;
  string kernel_version = 8;
  string build_time = 9;
  repeated ComponentVersion components = 10;
}

message ComponentVersion {
  string name = 1;
  string version = 2;
  map<string, string> details = 3;
}

message GetDiskUsageRequest {}

message GetDiskUsageResponse {
  DiskUsage usage = 1;
}

message DiskUsage {
  repeated ImageSummary images = 1;
  repeated ContainerSummary containers = 2;
  repeated VolumeSummary volumes = 3;
  repeated BuildCacheSummary build_cache = 4;
  int64 layers_size = 5;
}

message ImageSummary {
  string id = 1;
  repeated string repo_tags = 2;
  int64 created = 3;
  int64 size = 4;
  int64 shared_size = 5;
  int64 virtual_size = 6;
  int32 containers = 7;
}

message ContainerSummary {
  string id = 1;
  repeated string names = 2;
  string image = 3;
  string image_id = 4;
  string command = 5;
  int64 created = 6;
  string state = 7;
  string status = 8;
  int64 size_rw = 9;
  int64 size_root_fs = 10;
}

message VolumeSummary {
  string name = 1;
  string driver = 2;
  string mountpoint = 3;
  int64 usage_ref_count = 4;
  int64 usage_size = 5;
}

message BuildCacheSummary {
  string id = 1;
  string parent = 2;
  string type = 3;
  string description = 4;
  bool in_use = 5;
  bool shared = 6;
  int64 size = 7;
  int64 created_at = 8;
  int64 last_used_at = 9;
  int64 usage_count = 10;
}

message PingRequest {}

message PingResponse {
  string api_version = 1;
  string os_type = 2;
  bool experimental = 3;
  string builder_version = 4;
}

message GetEventsRequest {
  string since = 1;          // Show events since timestamp or relative (e.g., "10m")
  string until = 2;          // Show events until timestamp or relative
  string filters = 3;        // Event filters in JSON format
}

message DockerEvent {
  string type = 1;           // container, image, volume, network, daemon, etc.
  string action = 2;         // create, start, stop, destroy, pull, etc.
  Actor actor = 3;
  int64 time = 4;            // Unix timestamp
  int64 time_nano = 5;
  string scope = 6;          // local or swarm
}

message Actor {
  string id = 1;
  map<string, string> attributes = 2;
}
