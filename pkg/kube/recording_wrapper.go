// Code generated by spec-kit:implement; DO NOT EDIT.
// This file was generated at 2025-10-29 22:15:00
// Source: .claude/specs/010-k8s-pod-009/tasks.md (task: T019)

package kube

import (
	"sync"
	"time"

	"golang.org/x/net/websocket"

	"github.com/ysicing/tiga/internal/services/recording"
)

// RecordingWebSocketWrapper wraps a WebSocket connection to intercept data for recording
type RecordingWebSocketWrapper struct {
	conn      *websocket.Conn
	recorder  *recording.AsciinemaRecorder
	writeLock sync.Mutex
	readLock  sync.Mutex
	startedAt time.Time
}

// NewRecordingWebSocketWrapper creates a new recording WebSocket wrapper
func NewRecordingWebSocketWrapper(conn *websocket.Conn, recorder *recording.AsciinemaRecorder) *RecordingWebSocketWrapper {
	return &RecordingWebSocketWrapper{
		conn:      conn,
		recorder:  recorder,
		startedAt: time.Now(),
	}
}

// Read implements io.Reader to intercept incoming data from client
func (w *RecordingWebSocketWrapper) Read(p []byte) (int, error) {
	n, err := w.conn.Read(p)
	if err == nil && n > 0 {
		// Record the input data (stdin to terminal)
		if w.recorder != nil {
			w.recorder.WriteFrame("stdin", p[:n])
		}
	}
	return n, err
}

// Write implements io.Writer to intercept outgoing data to client
func (w *RecordingWebSocketWrapper) Write(p []byte) (int, error) {
	// Record the output data (stdout from terminal)
	if w.recorder != nil {
		w.recorder.WriteFrame("stdout", p)
	}
	w.writeLock.Lock()
	defer w.writeLock.Unlock()
	return w.conn.Write(p)
}

// Close closes the underlying WebSocket connection
func (w *RecordingWebSocketWrapper) Close() error {
	return w.conn.Close()
}

// SendJSON sends a JSON message through the connection
func (w *RecordingWebSocketWrapper) SendJSON(v interface{}) error {
	return websocket.JSON.Send(w.conn, v)
}

// ReceiveJSON receives a JSON message from the connection
func (w *RecordingWebSocketWrapper) ReceiveJSON(v interface{}) error {
	return websocket.JSON.Receive(w.conn, v)
}

// Config returns the WebSocket configuration
func (w *RecordingWebSocketWrapper) Config() *websocket.Config {
	return w.conn.Config()
}

// UnderlyingConn returns the underlying WebSocket connection
func (w *RecordingWebSocketWrapper) UnderlyingConn() *websocket.Conn {
	return w.conn
}
