// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/host_monitor.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HostMonitor_ReportState_FullMethodName            = "/proto.HostMonitor/ReportState"
	HostMonitor_RegisterAgent_FullMethodName          = "/proto.HostMonitor/RegisterAgent"
	HostMonitor_ReportProbeResultBatch_FullMethodName = "/proto.HostMonitor/ReportProbeResultBatch"
	HostMonitor_Heartbeat_FullMethodName              = "/proto.HostMonitor/Heartbeat"
	HostMonitor_IOStream_FullMethodName               = "/proto.HostMonitor/IOStream"
)

// HostMonitorClient is the client API for HostMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HostMonitor 主机监控服务
type HostMonitorClient interface {
	// ReportState Agent上报监控数据(双向流)
	ReportState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportStateRequest, ReportStateResponse], error)
	// RegisterAgent Agent注册
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	// ReportProbeResultBatch Agent批量上报探测结果
	ReportProbeResultBatch(ctx context.Context, in *ReportProbeResultBatchRequest, opts ...grpc.CallOption) (*ReportProbeResultBatchResponse, error)
	// Heartbeat 心跳保持
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// IOStream PTY终端I/O流(双向流)
	IOStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IOStreamData, IOStreamData], error)
}

type hostMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewHostMonitorClient(cc grpc.ClientConnInterface) HostMonitorClient {
	return &hostMonitorClient{cc}
}

func (c *hostMonitorClient) ReportState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReportStateRequest, ReportStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HostMonitor_ServiceDesc.Streams[0], HostMonitor_ReportState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReportStateRequest, ReportStateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostMonitor_ReportStateClient = grpc.BidiStreamingClient[ReportStateRequest, ReportStateResponse]

func (c *hostMonitorClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, HostMonitor_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostMonitorClient) ReportProbeResultBatch(ctx context.Context, in *ReportProbeResultBatchRequest, opts ...grpc.CallOption) (*ReportProbeResultBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportProbeResultBatchResponse)
	err := c.cc.Invoke(ctx, HostMonitor_ReportProbeResultBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostMonitorClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, HostMonitor_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostMonitorClient) IOStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IOStreamData, IOStreamData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HostMonitor_ServiceDesc.Streams[1], HostMonitor_IOStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IOStreamData, IOStreamData]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostMonitor_IOStreamClient = grpc.BidiStreamingClient[IOStreamData, IOStreamData]

// HostMonitorServer is the server API for HostMonitor service.
// All implementations must embed UnimplementedHostMonitorServer
// for forward compatibility.
//
// HostMonitor 主机监控服务
type HostMonitorServer interface {
	// ReportState Agent上报监控数据(双向流)
	ReportState(grpc.BidiStreamingServer[ReportStateRequest, ReportStateResponse]) error
	// RegisterAgent Agent注册
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	// ReportProbeResultBatch Agent批量上报探测结果
	ReportProbeResultBatch(context.Context, *ReportProbeResultBatchRequest) (*ReportProbeResultBatchResponse, error)
	// Heartbeat 心跳保持
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// IOStream PTY终端I/O流(双向流)
	IOStream(grpc.BidiStreamingServer[IOStreamData, IOStreamData]) error
	mustEmbedUnimplementedHostMonitorServer()
}

// UnimplementedHostMonitorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostMonitorServer struct{}

func (UnimplementedHostMonitorServer) ReportState(grpc.BidiStreamingServer[ReportStateRequest, ReportStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReportState not implemented")
}
func (UnimplementedHostMonitorServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedHostMonitorServer) ReportProbeResultBatch(context.Context, *ReportProbeResultBatchRequest) (*ReportProbeResultBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProbeResultBatch not implemented")
}
func (UnimplementedHostMonitorServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedHostMonitorServer) IOStream(grpc.BidiStreamingServer[IOStreamData, IOStreamData]) error {
	return status.Errorf(codes.Unimplemented, "method IOStream not implemented")
}
func (UnimplementedHostMonitorServer) mustEmbedUnimplementedHostMonitorServer() {}
func (UnimplementedHostMonitorServer) testEmbeddedByValue()                     {}

// UnsafeHostMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostMonitorServer will
// result in compilation errors.
type UnsafeHostMonitorServer interface {
	mustEmbedUnimplementedHostMonitorServer()
}

func RegisterHostMonitorServer(s grpc.ServiceRegistrar, srv HostMonitorServer) {
	// If the following call pancis, it indicates UnimplementedHostMonitorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostMonitor_ServiceDesc, srv)
}

func _HostMonitor_ReportState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostMonitorServer).ReportState(&grpc.GenericServerStream[ReportStateRequest, ReportStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostMonitor_ReportStateServer = grpc.BidiStreamingServer[ReportStateRequest, ReportStateResponse]

func _HostMonitor_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostMonitorServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostMonitor_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostMonitorServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostMonitor_ReportProbeResultBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProbeResultBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostMonitorServer).ReportProbeResultBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostMonitor_ReportProbeResultBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostMonitorServer).ReportProbeResultBatch(ctx, req.(*ReportProbeResultBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostMonitor_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostMonitorServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostMonitor_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostMonitorServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostMonitor_IOStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HostMonitorServer).IOStream(&grpc.GenericServerStream[IOStreamData, IOStreamData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostMonitor_IOStreamServer = grpc.BidiStreamingServer[IOStreamData, IOStreamData]

// HostMonitor_ServiceDesc is the grpc.ServiceDesc for HostMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HostMonitor",
	HandlerType: (*HostMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _HostMonitor_RegisterAgent_Handler,
		},
		{
			MethodName: "ReportProbeResultBatch",
			Handler:    _HostMonitor_ReportProbeResultBatch_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _HostMonitor_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportState",
			Handler:       _HostMonitor_ReportState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "IOStream",
			Handler:       _HostMonitor_IOStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/host_monitor.proto",
}
