// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/terminal.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Terminal_CreateSession_FullMethodName = "/proto.Terminal/CreateSession"
	Terminal_Terminal_FullMethodName      = "/proto.Terminal/Terminal"
	Terminal_CloseSession_FullMethodName  = "/proto.Terminal/CloseSession"
)

// TerminalClient is the client API for Terminal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Terminal WebSSH终端服务
type TerminalClient interface {
	// CreateSession 创建终端会话
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Terminal 终端IO流(双向流)
	Terminal(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TerminalRequest, TerminalResponse], error)
	// CloseSession 关闭终端会话
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
}

type terminalClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalClient(cc grpc.ClientConnInterface) TerminalClient {
	return &terminalClient{cc}
}

func (c *terminalClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, Terminal_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalClient) Terminal(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TerminalRequest, TerminalResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Terminal_ServiceDesc.Streams[0], Terminal_Terminal_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TerminalRequest, TerminalResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Terminal_TerminalClient = grpc.BidiStreamingClient[TerminalRequest, TerminalResponse]

func (c *terminalClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, Terminal_CloseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalServer is the server API for Terminal service.
// All implementations must embed UnimplementedTerminalServer
// for forward compatibility.
//
// Terminal WebSSH终端服务
type TerminalServer interface {
	// CreateSession 创建终端会话
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Terminal 终端IO流(双向流)
	Terminal(grpc.BidiStreamingServer[TerminalRequest, TerminalResponse]) error
	// CloseSession 关闭终端会话
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	mustEmbedUnimplementedTerminalServer()
}

// UnimplementedTerminalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTerminalServer struct{}

func (UnimplementedTerminalServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedTerminalServer) Terminal(grpc.BidiStreamingServer[TerminalRequest, TerminalResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Terminal not implemented")
}
func (UnimplementedTerminalServer) CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedTerminalServer) mustEmbedUnimplementedTerminalServer() {}
func (UnimplementedTerminalServer) testEmbeddedByValue()                  {}

// UnsafeTerminalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalServer will
// result in compilation errors.
type UnsafeTerminalServer interface {
	mustEmbedUnimplementedTerminalServer()
}

func RegisterTerminalServer(s grpc.ServiceRegistrar, srv TerminalServer) {
	// If the following call pancis, it indicates UnimplementedTerminalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Terminal_ServiceDesc, srv)
}

func _Terminal_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terminal_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terminal_Terminal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TerminalServer).Terminal(&grpc.GenericServerStream[TerminalRequest, TerminalResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Terminal_TerminalServer = grpc.BidiStreamingServer[TerminalRequest, TerminalResponse]

func _Terminal_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terminal_CloseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Terminal_ServiceDesc is the grpc.ServiceDesc for Terminal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Terminal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Terminal",
	HandlerType: (*TerminalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Terminal_CreateSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _Terminal_CloseSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Terminal",
			Handler:       _Terminal_Terminal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/terminal.proto",
}
