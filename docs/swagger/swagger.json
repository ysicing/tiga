{
    "swagger": "2.0",
    "info": {
        "description": "Multi-instance DevOps management platform with support for MinIO, MySQL, PostgreSQL, Redis, Docker, and Caddy.\n\nFeatures:\n- Instance health monitoring and metrics collection\n- Alert management with rules and events\n- Comprehensive audit logging\n- MinIO object storage management\n- Database management with SQL editor\n- Docker container operations\n",
        "title": "Tiga DevOps Platform API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/ysicing/tiga",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/api/auth/login/password": {
            "post": {
                "description": "Authenticate user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "204": {
                        "description": "No Content - Login successful (cookie set)"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidate user session and clear auth cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/providers": {
            "get": {
                "description": "Get list of available OAuth authentication providers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get OAuth providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Get a new access token using refresh token (from cookie or JSON body)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token (optional if cookie is set)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get information about the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/system/config": {
            "get": {
                "description": "Get public system configuration (no auth required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get public system configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicConfigResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update system configuration settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Update system configuration (admin only)",
                "parameters": [
                    {
                        "description": "System configuration",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSystemConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/system/config/full": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get full system configuration including all settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get full system configuration (admin only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alert-events": {
            "get": {
                "description": "List all alert events with filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "List alert events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by rule ID",
                        "name": "rule_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (firing/acknowledged/resolved)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/alert-events/{id}/acknowledge": {
            "post": {
                "description": "Mark an alert event as acknowledged",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "Acknowledge alert event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Acknowledgment note",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/alert-events/{id}/resolve": {
            "post": {
                "description": "Mark an alert event as resolved",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "Resolve alert event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resolution note",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/alert-rules": {
            "get": {
                "description": "List all alert rules with filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "List alert rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule type (host/service)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by enabled status",
                        "name": "enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new monitor alert rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "Create alert rule",
                "parameters": [
                    {
                        "description": "Alert rule",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MonitorAlertRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/alert-rules/{id}": {
            "get": {
                "description": "Get an alert rule by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "Get alert rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing alert rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "Update alert rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Alert rule",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MonitorAlertRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an alert rule and its events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor Alerts"
                ],
                "summary": "Delete alert rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of alert events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "List alert events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by alert ID (UUID)",
                        "name": "alert_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (firing, acknowledged, resolved)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/events/active": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all currently firing alert events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get active alert events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/events/{event_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get alert event details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get alert event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/events/{event_id}/acknowledge": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Acknowledge an alert event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Acknowledge alert event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Acknowledgement request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AcknowledgeAlertEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/events/{event_id}/resolve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resolve an alert event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Resolve alert event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of alert rules",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "List alert rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by enabled status",
                        "name": "enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity (critical, warning, info)",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in name, description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new alert rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Create alert rule",
                "parameters": [
                    {
                        "description": "Alert rule creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateAlertRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/rules/{rule_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get alert rule details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get alert rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID (UUID)",
                        "name": "rule_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an alert rule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Delete alert rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID (UUID)",
                        "name": "rule_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update alert rule details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Update alert rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID (UUID)",
                        "name": "rule_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Alert rule update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateAlertRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/rules/{rule_id}/toggle": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Enable or disable an alert rule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Toggle alert rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rule ID (UUID)",
                        "name": "rule_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Toggle request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ToggleAlertRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/alerts/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall alert statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Get alert statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of audit logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "List audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user ID (UUID)",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by resource type",
                        "name": "resource_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by resource ID (UUID)",
                        "name": "resource_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action (create, read, update, delete)",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (success, failure)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by IP address",
                        "name": "ip_address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in description, changes",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/actions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all distinct action types in audit logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get distinct actions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/failed": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get failed audit logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "List failed actions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/recent": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the most recent audit logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "List recent audit logs",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/resource-types": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all distinct resource types in audit logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get distinct resource types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/resources/{resource_type}/{resource_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get audit logs for a specific resource",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "List resource audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource ID (UUID)",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search audit logs by text query",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Search audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall audit log statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/timeline": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get activity timeline aggregated over time buckets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get activity timeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Aggregation interval (e.g., '1 hour')",
                        "name": "interval",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/{log_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get audit log details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log ID (UUID)",
                        "name": "log_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change current user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/oauth/login": {
            "post": {
                "description": "Complete OAuth login flow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "OAuth login",
                "parameters": [
                    {
                        "description": "OAuth login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.OAuthLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/oauth/url": {
            "get": {
                "description": "Get the URL to redirect user for OAuth authorization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get OAuth authorization URL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth provider (google, github, oidc)",
                        "name": "provider",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current authenticated user's profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all active sessions for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get active sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/sessions/{session_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidate a specific session by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Invalidate session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of database instances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "List database instances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by service type",
                        "name": "service_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by environment",
                        "name": "environment",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "description": "Filter by tags",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in name, host, description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new database service instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Create database instance",
                "parameters": [
                    {
                        "description": "Instance creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall database instance statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Get database instance statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/{instance_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get database instance details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Get database instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a database instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Delete database instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update database instance details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Update database instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Instance update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/{instance_id}/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get health status for a specific database instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Get database instance health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/instances.HealthStatusResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update database instance health status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Update database instance health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Health update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateInstanceHealthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/{instance_id}/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get metrics for a specific database instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Get database instance metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/instances.ServiceMetricsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/{instance_id}/metrics/latest": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the most recent value for all metrics of a database instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get all latest metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/{instance_id}/metrics/names": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all available metric names for a database instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metric names",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/{instance_id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update database instance operational status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Update database instance status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateInstanceStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dbs/{instance_id}/tags": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add tags to a database instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Add tags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tags to add",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ManageTagsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove tags from a database instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dbs"
                ],
                "summary": "Remove tags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tags to remove",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ManageTagsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of Docker instances with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-instances"
                ],
                "summary": "List Docker instances",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by health status (online, offline, archived, unknown)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Agent ID (UUID)",
                        "name": "agent_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or description",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/docker.DockerInstanceResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually register a Docker instance (Note: Auto-discovery is preferred via Agent)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-instances"
                ],
                "summary": "Create Docker instance",
                "parameters": [
                    {
                        "description": "Instance creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docker.CreateInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.DockerInstance"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/test-connection": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Test connection to Docker daemon via Agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-instances"
                ],
                "summary": "Test Docker connection",
                "parameters": [
                    {
                        "description": "Connection test request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docker.TestConnectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/docker.TestConnectionResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a Docker instance by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-instances"
                ],
                "summary": "Get Docker instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/docker.DockerInstanceResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update Docker instance metadata (name, description, labels)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-instances"
                ],
                "summary": "Update Docker instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Instance update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docker.UpdateInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.DockerInstance"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Archive a Docker instance (soft delete)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-instances"
                ],
                "summary": "Delete Docker instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of Docker containers for a specific instance with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "List containers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show all containers (default: false, only running)",
                        "name": "all",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by container name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Delete container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete container request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.DeleteContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/pause": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pause a running Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Pause container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pause container request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.PauseContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restart a Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Restart container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Restart container request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.RestartContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Start container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Start container request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.StartContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/stop": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stop a running Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Stop container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Stop container request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.StopContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/unpause": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unpause a paused Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Unpause container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Unpause container request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.UnpauseContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/{container_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Get container details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container ID or name",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/{container_id}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get historical logs from a Docker container (non-streaming)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Get container logs (historical)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container ID or name",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Number of lines to show from the end (default: 100)",
                        "name": "tail",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show timestamps (default: false)",
                        "name": "timestamps",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/{container_id}/logs/stream": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stream real-time logs from a Docker container using Server-Sent Events (SSE)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Get container logs (streaming)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container ID or name",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Number of lines to show from the end (default: 100)",
                        "name": "tail",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Show logs since timestamp or relative",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Show timestamps (default: false)",
                        "name": "timestamps",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of container logs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/{container_id}/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current resource usage statistics for a Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Get container stats (single query)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container ID or name",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/{container_id}/stats/stream": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stream real-time resource usage statistics for a Docker container using Server-Sent Events (SSE)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "docker-containers"
                ],
                "summary": "Get container stats (streaming)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container ID or name",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of container stats",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/containers/{container_id}/terminal": {
            "post": {
                "description": "Create a WebSocket terminal session for a Docker container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-terminal"
                ],
                "summary": "Create Docker container terminal session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Terminal options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docker.CreateTerminalSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/images": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of Docker images for a specific instance with filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-images"
                ],
                "summary": "List Docker images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Show all images (default: false, only show non-dangling images)",
                        "name": "all",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter images (e.g., 'reference=nginx:*')",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/images/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a Docker image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-images"
                ],
                "summary": "Delete Docker image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete image request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.DeleteImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/images/pull": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pull a Docker image with real-time progress updates using Server-Sent Events (SSE)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "docker-images"
                ],
                "summary": "Pull Docker image (streaming)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pull image request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.PullImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of pull progress",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/images/tag": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a tag for a Docker image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-images"
                ],
                "summary": "Tag Docker image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag image request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.TagImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handlers.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/images/{image_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific Docker image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-images"
                ],
                "summary": "Get image details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image ID or name:tag",
                        "name": "image_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/networks": {
            "get": {
                "description": "Get a list of all networks on the Docker instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Networks"
                ],
                "summary": "List Docker networks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Docker filters in JSON format",
                        "name": "filters",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network list response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new network on the Docker instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Networks"
                ],
                "summary": "Create Docker network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Network creation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.CreateNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created network details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/networks/connect": {
            "post": {
                "description": "Connect a container to a Docker network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Networks"
                ],
                "summary": "Connect container to network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Network connection parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.ConnectNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/networks/delete": {
            "post": {
                "description": "Delete a network from the Docker instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Networks"
                ],
                "summary": "Delete Docker network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Network deletion parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.DeleteNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletion result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/networks/disconnect": {
            "post": {
                "description": "Disconnect a container from a Docker network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Networks"
                ],
                "summary": "Disconnect container from network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Network disconnection parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.DisconnectNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Disconnection result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/networks/{network_id}": {
            "get": {
                "description": "Get detailed information about a specific network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Networks"
                ],
                "summary": "Get Docker network details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Network ID or name",
                        "name": "network_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Verbose mode",
                        "name": "verbose",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Network scope",
                        "name": "scope",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Network not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/system/disk-usage": {
            "get": {
                "description": "Get disk usage information for images, containers, volumes, and build cache",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker System"
                ],
                "summary": "Get Docker disk usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Disk usage information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/system/events/stream": {
            "get": {
                "description": "Stream Docker events in real-time using Server-Sent Events (SSE)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "Docker System"
                ],
                "summary": "Stream Docker events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Show events since timestamp or relative (e.g., '10m')",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Show events until timestamp or relative",
                        "name": "until",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event filters in JSON format",
                        "name": "filters",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of Docker events",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/system/info": {
            "get": {
                "description": "Get detailed system information from the Docker daemon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker System"
                ],
                "summary": "Get Docker system information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "System information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/system/ping": {
            "get": {
                "description": "Check if Docker daemon is responsive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker System"
                ],
                "summary": "Ping Docker daemon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ping response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/system/version": {
            "get": {
                "description": "Get Docker version and build information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker System"
                ],
                "summary": "Get Docker version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Version information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/volumes": {
            "get": {
                "description": "Get a list of all volumes on the Docker instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Volumes"
                ],
                "summary": "List Docker volumes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Volume list response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new volume on the Docker instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Volumes"
                ],
                "summary": "Create Docker volume",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Volume creation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.CreateVolumeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created volume details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/volumes/delete": {
            "post": {
                "description": "Delete a volume from the Docker instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Volumes"
                ],
                "summary": "Delete Docker volume",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Volume deletion parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.DeleteVolumeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletion result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/volumes/prune": {
            "post": {
                "description": "Remove all unused volumes from the Docker instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Volumes"
                ],
                "summary": "Prune unused Docker volumes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Prune filters (optional)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.PruneVolumesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prune result with space reclaimed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/instances/{id}/volumes/{volume_name}": {
            "get": {
                "description": "Get detailed information about a specific volume",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Volumes"
                ],
                "summary": "Get Docker volume details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Docker Instance ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Volume name",
                        "name": "volume_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Volume details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Volume not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/recordings": {
            "get": {
                "description": "Get a list of terminal recordings with filtering and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-recordings"
                ],
                "summary": "Get terminal recordings list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by Docker instance ID",
                        "name": "instance_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by container ID",
                        "name": "container_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by start date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by end date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "started_at",
                        "description": "Sort field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "DESC",
                        "description": "Sort order (ASC/DESC)",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/recordings/statistics": {
            "get": {
                "description": "Get statistics about terminal recordings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-recordings"
                ],
                "summary": "Get recording statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/recordings/{id}": {
            "get": {
                "description": "Get details of a specific terminal recording",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-recordings"
                ],
                "summary": "Get terminal recording details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a terminal recording and its file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker-recordings"
                ],
                "summary": "Delete a terminal recording",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/recordings/{id}/playback": {
            "get": {
                "description": "Stream the asciinema recording file for browser playback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/x-asciicast"
                ],
                "tags": [
                    "docker-recordings"
                ],
                "summary": "Stream recording file for playback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/docker/terminal/{session_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establish WebSocket connection for Docker container terminal",
                "tags": [
                    "docker-terminal"
                ],
                "summary": "WebSocket Docker container terminal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/hosts": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "List hosts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group name filter",
                        "name": "group_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search keyword",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Create a new host node",
                "parameters": [
                    {
                        "description": "Host information",
                        "name": "host",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HostNode"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/hosts/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Get host details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Update host",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Host information",
                        "name": "host",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HostNode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Delete host",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/hosts/{id}/state/current": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Get current state",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/hosts/{id}/state/history": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Get historical states",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Host ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Interval (auto/1m/5m/1h/1d)",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Metrics (comma-separated)",
                        "name": "metrics",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a list of all Kubernetes clusters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "List all clusters",
                "responses": {
                    "200": {
                        "description": "code=200, data={clusters:[], total:int}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new Kubernetes cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Create a new cluster",
                "parameters": [
                    {
                        "description": "Cluster data",
                        "name": "cluster",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cluster.CreateClusterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "code=201, data=cluster",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "code=409, message=Cluster name already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/:cluster_id/search": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Search across multiple Kubernetes resource types (Pods, Deployments, Services, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-search"
                ],
                "summary": "Global search across resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (minimum 2 characters)",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of results (default 50, max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/handlers.SearchResponse"
                        }
                    },
                    "400": {
                        "description": "error=Query must be at least 2 characters long",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error=Failed to perform search",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a single Kubernetes cluster by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Get cluster by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data=cluster",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing Kubernetes cluster (partial update supported)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Update a cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cluster update data",
                        "name": "cluster",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cluster.UpdateClusterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data=cluster",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "code=409, message=Cluster name already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Soft delete a Kubernetes cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Delete a cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/clonesets": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List all OpenKruise CloneSets in a namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "List CloneSets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace (default: all namespaces)",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={items:[], total:int}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=CRD not installed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/clonesets/{name}/restart": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Trigger a rolling restart of an OpenKruise CloneSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Restart CloneSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CloneSet name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=CloneSet not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/clonesets/{name}/scale": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Scale an OpenKruise CloneSet to a specified replica count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Scale CloneSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CloneSet name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Scale request {replicas: int}",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=CloneSet not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/crd-resources": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List resources of a specific CRD type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "List CRD resources",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API group (e.g., apps.kruise.io)",
                        "name": "group",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API version (e.g., v1alpha1)",
                        "name": "version",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type (e.g., clonesets)",
                        "name": "resource",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace (default: all namespaces)",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={items:[], total:int}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Missing required parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=CRD not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new CRD resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Create a CRD resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resource definition",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "code=201, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/crd-resources/apply": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create or update a CRD resource from YAML definition",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Apply CRD resource from YAML",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "YAML definition",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success, data={action:'created'|'updated'}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid YAML",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/crd-resources/{name}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get detailed information about a specific CRD resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Get a CRD resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API group",
                        "name": "group",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={resource}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Resource not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing CRD resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Update a CRD resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated resource definition",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Resource not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a specific CRD resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Delete a CRD resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API group",
                        "name": "group",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API version",
                        "name": "version",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Resource not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/crds": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Detect installed Custom Resource Definitions in the cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Detect installed CRDs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={kruise:{installed:bool, crds:[]}, ...}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/daemonsets": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List all OpenKruise Advanced DaemonSets in a namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "List Advanced DaemonSets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace (default: all namespaces)",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={items:[], total:int}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=CRD not installed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/daemonsets/{name}/restart": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Trigger a rolling restart of an OpenKruise Advanced DaemonSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Restart Advanced DaemonSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DaemonSet name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=DaemonSet not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/prometheus/rediscover": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Manually trigger Prometheus service discovery for a cluster (async operation)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Trigger Prometheus rediscovery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "code=202, message=Task started, data={cluster_id, task_started_at}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "code=409, message=Discovery task already running",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/resource-history": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List resource operation history for a cluster with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-resource-history"
                ],
                "summary": "List resource operation history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type (e.g., Pod, CloneSet)",
                        "name": "resource_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource name",
                        "name": "resource_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API group (for CRDs)",
                        "name": "api_group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "API version",
                        "name": "api_version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Operation type (create, update, delete, apply, scale, restart)",
                        "name": "operation_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by success status",
                        "name": "success",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={items:[], total:int, page:int, page_size:int}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/resource-history/{history_id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get detailed information about a specific resource operation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-resource-history"
                ],
                "summary": "Get resource operation history detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "History ID (UUID)",
                        "name": "history_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={history}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=History not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a specific resource operation history record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-resource-history"
                ],
                "summary": "Delete resource operation history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "History ID (UUID)",
                        "name": "history_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=History not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/set-default": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Set a specific cluster as the default cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Set cluster as default",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/statefulsets": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List all OpenKruise Advanced StatefulSets in a namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "List Advanced StatefulSets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace (default: all namespaces)",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={items:[], total:int}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=CRD not installed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "code=500, message=error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/statefulsets/{name}/restart": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Trigger a rolling restart of an OpenKruise Advanced StatefulSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Restart Advanced StatefulSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "StatefulSet name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=StatefulSet not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/statefulsets/{name}/scale": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Scale an OpenKruise Advanced StatefulSet to a specified replica count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-crd"
                ],
                "summary": "Scale Advanced StatefulSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "StatefulSet name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Scale request {replicas: int}",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, message=success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=StatefulSet not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/clusters/{id}/terminal": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "WebSocket connection for pod terminal access",
                "tags": [
                    "k8s-terminal"
                ],
                "summary": "Pod WebSocket terminal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod name",
                        "name": "pod",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container name (default: first container)",
                        "name": "container",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/k8s/clusters/{id}/test-connection": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Test connection to a Kubernetes cluster using provided kubeconfig",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "k8s-clusters"
                ],
                "summary": "Test cluster connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Kubeconfig for testing (optional, uses stored config if not provided)",
                        "name": "config",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/cluster.TestConnectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code=200, data={connected:true, server_version:string}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "code=400, message=Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "code=404, message=Cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "code=503, message=Connection failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/k8s/crd-status/{type}": {
            "get": {
                "description": "Get the installation status and available workloads of a CRD operator (openkruise, tailscale, traefik, systemupgrade)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kubernetes"
                ],
                "summary": "Get CRD operator status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CRD type (openkruise|tailscale|traefik|systemupgrade)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CRDStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Query metrics with time range and filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Query metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by metric name",
                        "name": "metric_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by metric type",
                        "name": "metric_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Order by time (asc, desc)",
                        "name": "order_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new metric data point",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Create metric",
                "parameters": [
                    {
                        "description": "Metric creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateMetricRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/aggregate": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Aggregate metrics over time buckets using TimescaleDB",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Aggregate metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metric name",
                        "name": "metric_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Aggregation interval (e.g., '5 minutes', '1 hour')",
                        "name": "interval",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/average": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calculate average metric value over time range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Calculate average",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metric name",
                        "name": "metric_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/batch": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple metric data points in batch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Create metrics batch",
                "parameters": [
                    {
                        "description": "Batch metric creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateMetricsBatchRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/latest": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the most recent metric value",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get latest metric",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metric name",
                        "name": "metric_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/percentile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calculate percentile (p50, p95, p99) for a metric",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Calculate percentile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metric name",
                        "name": "metric_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Percentile value (0-1, e.g., 0.95 for p95)",
                        "name": "percentile",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get overall metrics statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metrics statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/timeseries": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get time series data points for charting",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get time series data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID (UUID)",
                        "name": "instance_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Metric name",
                        "name": "metric_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339)",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339)",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Data point interval (e.g., '5 minutes')",
                        "name": "interval",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "description": "Filter by roles",
                        "name": "roles",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in username, email, full_name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a user (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}/audit": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get audit logs for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "List user audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all roles assigned to a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a role to a user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Assign role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role assignment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}/roles/{role_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke a role from a user (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Revoke role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID (UUID)",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/version": {
            "get": {
                "description": "返回服务端的版本号、构建时间和 commit ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "获取服务端版本信息",
                "responses": {
                    "200": {
                        "description": "版本信息",
                        "schema": {
                            "$ref": "#/definitions/github_com_ysicing_tiga_internal_version.Info"
                        }
                    }
                }
            }
        },
        "/api/v1/vms/host-groups": {
            "get": {
                "description": "Get a list of all unique group names used by host nodes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VMs"
                ],
                "summary": "List all host groups",
                "responses": {
                    "200": {
                        "description": "成功",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "失败",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/vms/hosts/{id}/agent-install-command": {
            "get": {
                "description": "Returns the command to install agent on the host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Get agent installation command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/vms/hosts/{id}/regenerate-secret-key": {
            "post": {
                "description": "Regenerates the secret key for a host and disconnects current agent",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hosts"
                ],
                "summary": "Regenerate host secret key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Host ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current audit system configuration (retention period, write policy, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/audit.AuditConfig"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update audit system configuration. Changes take effect immediately. Retention period changes apply on next cleanup task execution. Modifying retention period may cause historical data to be cleaned up.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Update audit configuration",
                "parameters": [
                    {
                        "description": "Audit configuration to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/audit.UpdateConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/audit.AuditConfig"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters (retention_days must be between 1 and 3650)",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated audit logs with multi-dimensional filtering by user, resource type, action, time range, client IP, and request ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit logs list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page size (default: 20)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user UID",
                        "name": "user_uid",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "cluster",
                            "pod",
                            "deployment",
                            "service",
                            "database",
                            "databaseInstance",
                            "user",
                            "role",
                            "scheduledTask"
                        ],
                        "type": "string",
                        "description": "Filter by resource type",
                        "name": "resource_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created",
                            "updated",
                            "deleted",
                            "read",
                            "enabled",
                            "disabled",
                            "login",
                            "logout",
                            "granted",
                            "revoked"
                        ],
                        "type": "string",
                        "description": "Filter by action type",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start time (Unix milliseconds)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End time (Unix milliseconds)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by client IP",
                        "name": "client_ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by request ID",
                        "name": "request_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.AuditEvent"
                                    }
                                },
                                "pagination": {
                                    "$ref": "#/definitions/handlers.Pagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit/events/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get complete details of a single audit event including full object diff data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit event details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Audit event ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/models.AuditEvent"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/executions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of task execution history with filtering by task name, state, and time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Get execution history",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page size (default: 20)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task name",
                        "name": "task_name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "running",
                            "success",
                            "failure",
                            "timeout",
                            "cancelled",
                            "interrupted"
                        ],
                        "type": "string",
                        "description": "Filter by execution state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start time (Unix milliseconds)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End time (Unix milliseconds)",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.TaskExecution"
                                    }
                                },
                                "pagination": {
                                    "$ref": "#/definitions/handlers.Pagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/executions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific task execution by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Get execution details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Execution ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/models.TaskExecution"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics for all tasks including success rate, average execution time, and failure counts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Get statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "average_duration_ms": {
                                            "type": "integer"
                                        },
                                        "enabled_tasks": {
                                            "type": "integer"
                                        },
                                        "success_rate": {
                                            "type": "number"
                                        },
                                        "task_stats": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "total_executions": {
                                            "type": "integer"
                                        },
                                        "total_tasks": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of scheduled tasks with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Get task list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page size (default: 20)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by enabled status",
                        "name": "enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.ScheduledTask"
                                    }
                                },
                                "pagination": {
                                    "$ref": "#/definitions/handlers.Pagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/tasks/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific scheduled task by UID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Get task details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "$ref": "#/definitions/models.ScheduledTask"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/tasks/{id}/disable": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Disable a scheduled task. Takes effect immediately. Running tasks are not affected",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Disable task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/tasks/{id}/enable": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Enable a scheduled task. Takes effect immediately without service restart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Enable task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scheduler/tasks/{id}/trigger": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Immediately execute a task without waiting for the next scheduled time. For debugging and emergency situations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Trigger task manually",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task UID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Trigger parameters (optional)",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/scheduler.TriggerTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task queued successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "execution_uid": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Task already running",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "audit.AuditConfig": {
            "type": "object",
            "properties": {
                "retention_days": {
                    "description": "Audit log retention days (1-3650)",
                    "type": "integer"
                }
            }
        },
        "audit.UpdateConfigRequest": {
            "type": "object",
            "required": [
                "retention_days"
            ],
            "properties": {
                "retention_days": {
                    "type": "integer",
                    "maximum": 3650,
                    "minimum": 1
                }
            }
        },
        "cluster.CreateClusterRequest": {
            "type": "object",
            "required": [
                "config",
                "name"
            ],
            "properties": {
                "config": {
                    "description": "Kubeconfig content",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "in_cluster": {
                    "type": "boolean"
                },
                "is_default": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "prometheus_url": {
                    "type": "string"
                }
            }
        },
        "cluster.TestConnectionRequest": {
            "type": "object",
            "required": [
                "config"
            ],
            "properties": {
                "config": {
                    "description": "Kubeconfig content",
                    "type": "string"
                }
            }
        },
        "cluster.UpdateClusterRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Kubeconfig content",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "in_cluster": {
                    "type": "boolean"
                },
                "is_default": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "prometheus_url": {
                    "type": "string"
                }
            }
        },
        "common.SearchResult": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                }
            }
        },
        "docker.CreateInstanceRequest": {
            "type": "object",
            "required": [
                "agent_id",
                "name"
            ],
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "docker.CreateTerminalSessionRequest": {
            "type": "object",
            "properties": {
                "cols": {
                    "description": "Default: 120",
                    "type": "integer"
                },
                "env": {
                    "description": "Environment variables",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "rows": {
                    "description": "Default: 30",
                    "type": "integer"
                },
                "shell": {
                    "description": "Default: /bin/sh",
                    "type": "string"
                }
            }
        },
        "docker.DockerInstanceResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "agent_name": {
                    "type": "string"
                },
                "api_version": {
                    "type": "string"
                },
                "architecture": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "description": "Agent IP address",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "kernel_version": {
                    "type": "string"
                },
                "labels": {
                    "description": "Metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "last_seen_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operating_system": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "port": {
                    "description": "gRPC port (default: 50051)",
                    "type": "integer"
                },
                "running_containers": {
                    "type": "integer"
                },
                "status": {
                    "description": "online, offline, unknown, archived",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "total_containers": {
                    "description": "Resource counts",
                    "type": "integer"
                },
                "total_images": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "description": "Docker daemon info",
                    "type": "string"
                }
            }
        },
        "docker.EndpointConfigInput": {
            "type": "object",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipam_config": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "docker.TestConnectionRequest": {
            "type": "object",
            "required": [
                "agent_id"
            ],
            "properties": {
                "agent_id": {
                    "type": "string"
                }
            }
        },
        "docker.TestConnectionResponse": {
            "type": "object",
            "properties": {
                "docker_info": {
                    "type": "object",
                    "additionalProperties": true
                },
                "error_message": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "docker.UpdateInstanceRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.ConnectNetworkRequest": {
            "type": "object",
            "required": [
                "container_id",
                "network_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                },
                "endpoint_config": {
                    "$ref": "#/definitions/docker.EndpointConfigInput"
                },
                "network_id": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.CreateNetworkRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "attachable": {
                    "type": "boolean"
                },
                "check_duplicate": {
                    "type": "boolean"
                },
                "driver": {
                    "type": "string"
                },
                "enable_ipv6": {
                    "type": "boolean"
                },
                "ingress": {
                    "type": "boolean"
                },
                "internal": {
                    "type": "boolean"
                },
                "ipam": {
                    "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.IPAMConfig"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.CreateVolumeRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "driver": {
                    "type": "string"
                },
                "driver_opts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.DeleteContainerRequest": {
            "type": "object",
            "required": [
                "container_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                },
                "force": {
                    "description": "Force removal of running container",
                    "type": "boolean"
                },
                "remove_volumes": {
                    "description": "Remove associated volumes",
                    "type": "boolean"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.DeleteImageRequest": {
            "type": "object",
            "required": [
                "image_id"
            ],
            "properties": {
                "force": {
                    "description": "Force removal even if in use",
                    "type": "boolean"
                },
                "image_id": {
                    "type": "string"
                },
                "no_prune": {
                    "description": "Do not delete untagged parents",
                    "type": "boolean"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.DeleteNetworkRequest": {
            "type": "object",
            "required": [
                "network_id"
            ],
            "properties": {
                "network_id": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.DeleteVolumeRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "force": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.DisconnectNetworkRequest": {
            "type": "object",
            "required": [
                "container_id",
                "network_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                },
                "force": {
                    "type": "boolean"
                },
                "network_id": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.IPAMConfig": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_ysicing_tiga_internal_api_handlers_docker.IPAMPool"
                    }
                },
                "driver": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.IPAMPool": {
            "type": "object",
            "properties": {
                "aux_addresses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "ip_range": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.PauseContainerRequest": {
            "type": "object",
            "required": [
                "container_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.PruneVolumesRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.PullImageRequest": {
            "type": "object",
            "required": [
                "image"
            ],
            "properties": {
                "image": {
                    "description": "Image name (e.g., nginx:1.21)",
                    "type": "string"
                },
                "registry_auth": {
                    "description": "Base64 encoded registry auth (optional)",
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.RestartContainerRequest": {
            "type": "object",
            "required": [
                "container_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                },
                "timeout": {
                    "description": "Optional timeout in seconds",
                    "type": "integer"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.StartContainerRequest": {
            "type": "object",
            "required": [
                "container_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.StopContainerRequest": {
            "type": "object",
            "required": [
                "container_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                },
                "timeout": {
                    "description": "Optional timeout in seconds",
                    "type": "integer"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.TagImageRequest": {
            "type": "object",
            "required": [
                "source",
                "target"
            ],
            "properties": {
                "source": {
                    "description": "Source image (e.g., nginx:1.21)",
                    "type": "string"
                },
                "target": {
                    "description": "Target tag (e.g., myregistry.com/nginx:latest)",
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_api_handlers_docker.UnpauseContainerRequest": {
            "type": "object",
            "required": [
                "container_id"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                }
            }
        },
        "github_com_ysicing_tiga_internal_version.Info": {
            "type": "object",
            "properties": {
                "build_time": {
                    "type": "string"
                },
                "commit_id": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "handlers.AcknowledgeAlertEventRequest": {
            "type": "object",
            "required": [
                "eventID"
            ],
            "properties": {
                "eventID": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                }
            }
        },
        "handlers.AssignRoleRequest": {
            "type": "object",
            "required": [
                "role_id",
                "userID"
            ],
            "properties": {
                "role_id": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "handlers.CRDStatus": {
            "type": "object",
            "properties": {
                "installed": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                },
                "workloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.CRDWorkload"
                    }
                }
            }
        },
        "handlers.CRDWorkload": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "available": {
                    "type": "boolean"
                },
                "count": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateAlertRuleRequest": {
            "type": "object",
            "required": [
                "name",
                "rule_config",
                "rule_type",
                "severity"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "instance_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notification_channels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "notification_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "rule_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "rule_type": {
                    "type": "string",
                    "enum": [
                        "threshold",
                        "anomaly",
                        "rate"
                    ]
                },
                "severity": {
                    "type": "string",
                    "enum": [
                        "critical",
                        "warning",
                        "info"
                    ]
                }
            }
        },
        "handlers.CreateInstanceRequest": {
            "type": "object",
            "required": [
                "host",
                "name",
                "port",
                "service_type"
            ],
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "type": "string",
                    "enum": [
                        "dev",
                        "test",
                        "staging",
                        "production"
                    ]
                },
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "service_type": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateMetricRequest": {
            "type": "object",
            "required": [
                "instance_id",
                "metric_name",
                "metric_type",
                "value"
            ],
            "properties": {
                "instance_id": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": true
                },
                "metric_name": {
                    "type": "string"
                },
                "metric_type": {
                    "type": "string"
                },
                "timestamp": {
                    "description": "RFC3339 format, defaults to now",
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "handlers.CreateMetricsBatchRequest": {
            "type": "object",
            "required": [
                "metrics"
            ],
            "properties": {
                "metrics": {
                    "type": "array",
                    "maxItems": 1000,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/handlers.CreateMetricRequest"
                    }
                }
            }
        },
        "handlers.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "suspended"
                    ]
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {},
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.ManageTagsRequest": {
            "type": "object",
            "required": [
                "instanceID",
                "tags"
            ],
            "properties": {
                "instanceID": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.OAuthLoginRequest": {
            "type": "object",
            "required": [
                "code",
                "provider",
                "state"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "provider": {
                    "description": "google, github, oidc",
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "handlers.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "pagination": {
                    "$ref": "#/definitions/handlers.Pagination"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.Pagination": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "handlers.PublicConfigResponse": {
            "type": "object",
            "properties": {
                "app_name": {
                    "type": "string"
                },
                "app_subtitle": {
                    "type": "string"
                },
                "enable_analytics": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "handlers.SearchResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.SearchResult"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "handlers.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.ToggleAlertRuleRequest": {
            "type": "object",
            "required": [
                "enabled",
                "ruleID"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "ruleID": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateAlertRuleRequest": {
            "type": "object",
            "required": [
                "ruleID"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "notification_channels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "notification_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "ruleID": {
                    "type": "string"
                },
                "rule_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "severity": {
                    "type": "string",
                    "enum": [
                        "critical",
                        "warning",
                        "info"
                    ]
                }
            }
        },
        "handlers.UpdateInstanceHealthRequest": {
            "type": "object",
            "required": [
                "health",
                "instanceID"
            ],
            "properties": {
                "health": {
                    "type": "string",
                    "enum": [
                        "healthy",
                        "unhealthy",
                        "degraded",
                        "unknown"
                    ]
                },
                "health_message": {
                    "type": "string"
                },
                "instanceID": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateInstanceRequest": {
            "type": "object",
            "required": [
                "instanceID"
            ],
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "type": "string",
                    "enum": [
                        "dev",
                        "test",
                        "staging",
                        "production"
                    ]
                },
                "host": {
                    "type": "string"
                },
                "instanceID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateInstanceStatusRequest": {
            "type": "object",
            "required": [
                "instanceID",
                "status"
            ],
            "properties": {
                "instanceID": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "running",
                        "stopped",
                        "failed"
                    ]
                }
            }
        },
        "handlers.UpdateSystemConfigRequest": {
            "type": "object",
            "properties": {
                "app_name": {
                    "type": "string"
                },
                "app_subtitle": {
                    "type": "string"
                },
                "enable_analytics": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserRequest": {
            "type": "object",
            "required": [
                "userID"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "suspended"
                    ]
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "instances.HealthStatusResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "healthy": {
                    "type": "boolean"
                },
                "last_check_time": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "response_time_ms": {
                    "type": "integer"
                }
            }
        },
        "instances.ServiceMetricsResponse": {
            "type": "object",
            "properties": {
                "instance_id": {
                    "type": "string"
                },
                "metrics": {
                    "type": "object",
                    "additionalProperties": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.Action": {
            "type": "string",
            "enum": [
                "created",
                "updated",
                "deleted",
                "read",
                "enabled",
                "disabled",
                "bypassed",
                "forcePush",
                "login",
                "logout",
                "granted",
                "revoked",
                "agent_connected",
                "agent_disconnected",
                "agent_reconnected",
                "terminal_created",
                "terminal_closed",
                "terminal_replay",
                "node_created",
                "node_updated",
                "node_deleted",
                "system_alert",
                "system_error"
            ],
            "x-enum-comments": {
                "ActionBypassed": "绕过检查",
                "ActionForcePush": "强制推送",
                "ActionRead": "敏感资源读取操作"
            },
            "x-enum-varnames": [
                "ActionCreated",
                "ActionUpdated",
                "ActionDeleted",
                "ActionRead",
                "ActionEnabled",
                "ActionDisabled",
                "ActionBypassed",
                "ActionForcePush",
                "ActionLogin",
                "ActionLogout",
                "ActionGranted",
                "ActionRevoked",
                "ActionAgentConnected",
                "ActionAgentDisconnected",
                "ActionAgentReconnected",
                "ActionTerminalCreated",
                "ActionTerminalClosed",
                "ActionTerminalReplay",
                "ActionNodeCreated",
                "ActionNodeUpdated",
                "ActionNodeDeleted",
                "ActionSystemAlert",
                "ActionSystemError"
            ]
        },
        "models.AlertSeverity": {
            "type": "string",
            "enum": [
                "info",
                "warning",
                "critical"
            ],
            "x-enum-varnames": [
                "AlertSeverityInfo",
                "AlertSeverityWarning",
                "AlertSeverityCritical"
            ]
        },
        "models.AlertType": {
            "type": "string",
            "enum": [
                "host",
                "service"
            ],
            "x-enum-varnames": [
                "AlertTypeHost",
                "AlertTypeService"
            ]
        },
        "models.AuditEvent": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "操作信息",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Action"
                        }
                    ]
                },
                "client_ip": {
                    "description": "客户端信息",
                    "type": "string"
                },
                "created_at": {
                    "description": "时间戳（仅创建）",
                    "type": "string"
                },
                "data": {
                    "description": "自定义数据",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "diff_object": {
                    "description": "差异对象（变更前后）",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DiffObject"
                        }
                    ]
                },
                "id": {
                    "description": "基础字段",
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "request_method": {
                    "description": "GET, POST, etc.",
                    "type": "string"
                },
                "resource": {
                    "description": "JSON 序列化",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Resource"
                        }
                    ]
                },
                "resource_type": {
                    "$ref": "#/definitions/models.ResourceType"
                },
                "space_path": {
                    "description": "空间路径（可选）",
                    "type": "string"
                },
                "subsystem": {
                    "description": "子系统标识",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SubsystemType"
                        }
                    ]
                },
                "timestamp": {
                    "description": "Unix 毫秒时间戳",
                    "type": "integer"
                },
                "user": {
                    "description": "操作主体",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Principal"
                        }
                    ]
                },
                "user_agent": {
                    "type": "string"
                }
            }
        },
        "models.DiffObject": {
            "type": "object",
            "properties": {
                "new_object": {
                    "description": "JSON 字符串，最大 64KB",
                    "type": "string"
                },
                "new_object_truncated": {
                    "type": "boolean"
                },
                "old_object": {
                    "description": "JSON 字符串，最大 64KB",
                    "type": "string"
                },
                "old_object_truncated": {
                    "type": "boolean"
                },
                "truncated_fields": {
                    "description": "被截断的字段列表",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.DockerInstance": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "api_version": {
                    "type": "string"
                },
                "architecture": {
                    "type": "string"
                },
                "container_count": {
                    "description": "Resource statistics (updated by health checks)",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "docker_version": {
                    "description": "Docker daemon information (fetched from Agent)",
                    "type": "string"
                },
                "host_id": {
                    "description": "Optional: associated host node",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_count": {
                    "type": "integer"
                },
                "kernel_version": {
                    "type": "string"
                },
                "last_connected_at": {
                    "type": "string"
                },
                "last_health_check": {
                    "type": "string"
                },
                "mem_total": {
                    "type": "integer"
                },
                "min_api_version": {
                    "type": "string"
                },
                "n_cpu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "network_count": {
                    "type": "integer"
                },
                "operating_system": {
                    "type": "string"
                },
                "status": {
                    "description": "Health and connection status",
                    "type": "string"
                },
                "storage_driver": {
                    "type": "string"
                },
                "tags": {
                    "description": "Metadata",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "volume_count": {
                    "type": "integer"
                }
            }
        },
        "models.ExecutionState": {
            "type": "string",
            "enum": [
                "pending",
                "running",
                "success",
                "failure",
                "timeout",
                "cancelled",
                "interrupted"
            ],
            "x-enum-varnames": [
                "ExecutionStatePending",
                "ExecutionStateRunning",
                "ExecutionStateSuccess",
                "ExecutionStateFailure",
                "ExecutionStateTimeout",
                "ExecutionStateCancelled",
                "ExecutionStateInterrupted"
            ]
        },
        "models.HostInfo": {
            "type": "object",
            "properties": {
                "agent_version": {
                    "description": "Agent information",
                    "type": "string"
                },
                "arch": {
                    "description": "Architecture (amd64/arm64)",
                    "type": "string"
                },
                "boot_time": {
                    "description": "System boot time (Unix timestamp)",
                    "type": "integer"
                },
                "cpu_cores": {
                    "description": "Number of CPU cores",
                    "type": "integer"
                },
                "cpu_model": {
                    "description": "Hardware information",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "disk_total": {
                    "description": "Total disk space in bytes",
                    "type": "integer"
                },
                "gpu_model": {
                    "description": "GPU information (optional)",
                    "type": "string"
                },
                "host_node_id": {
                    "description": "One-to-one with HostNode",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mem_total": {
                    "description": "Total memory in bytes",
                    "type": "integer"
                },
                "platform": {
                    "description": "System information",
                    "type": "string"
                },
                "platform_version": {
                    "description": "OS version (e.g., \"Ubuntu 22.04\")",
                    "type": "string"
                },
                "ssh_enabled": {
                    "description": "SSH configuration (reported by Agent)",
                    "type": "boolean"
                },
                "swap_total": {
                    "description": "Total swap space in bytes",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "virtualization": {
                    "description": "Virtualization type (kvm/docker/none)",
                    "type": "string"
                }
            }
        },
        "models.HostNode": {
            "type": "object",
            "properties": {
                "auto_renew": {
                    "description": "是否自动续费",
                    "type": "boolean"
                },
                "cost": {
                    "description": "Billing and expiry information",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "display_index": {
                    "type": "integer"
                },
                "expiry_date": {
                    "description": "到期时间",
                    "type": "string"
                },
                "group_name": {
                    "description": "Grouping",
                    "type": "string"
                },
                "hide_for_guest": {
                    "type": "boolean"
                },
                "host_info": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.HostInfo"
                        }
                    ]
                },
                "id": {
                    "type": "string"
                },
                "last_active": {
                    "description": "Connection status",
                    "type": "string"
                },
                "name": {
                    "description": "Basic information",
                    "type": "string"
                },
                "note": {
                    "description": "Display configuration",
                    "type": "string"
                },
                "online": {
                    "description": "Runtime status (computed from active connections, not persisted)",
                    "type": "boolean"
                },
                "public_note": {
                    "type": "string"
                },
                "purchase_date": {
                    "description": "购买日期",
                    "type": "string"
                },
                "renewal_type": {
                    "description": "续费周期：monthly 或 yearly",
                    "type": "string"
                },
                "traffic_limit": {
                    "description": "流量限制 (GB), 0表示无限",
                    "type": "integer"
                },
                "traffic_used": {
                    "description": "已用流量 (GB)",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.MonitorAlertRule": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "Condition expression (using antonmedv/expr)\nExamples:\n- Host: \"cpu_usage \u003e 80 \u0026\u0026 load_5 \u003e 10\"\n- Service: \"uptime_percentage \u003c 99.9 \u0026\u0026 failed_checks \u003e 10\"",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "duration": {
                    "description": "Trigger configuration",
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "last_triggered": {
                    "description": "Runtime statistics (not persisted)",
                    "type": "string"
                },
                "name": {
                    "description": "Basic information",
                    "type": "string"
                },
                "notify_channels": {
                    "description": "Notification channels (JSON array: [\"email\", \"webhook\", \"sms\"])",
                    "type": "string"
                },
                "notify_config": {
                    "description": "Notification configuration (JSON map)\nExample: {\"email\": [\"admin@example.com\"], \"webhook\": \"https://hooks.example.com\"}",
                    "type": "string"
                },
                "severity": {
                    "$ref": "#/definitions/models.AlertSeverity"
                },
                "target_id": {
                    "description": "HostNode ID or ServiceMonitor ID",
                    "type": "string"
                },
                "trigger_count": {
                    "type": "integer"
                },
                "type": {
                    "description": "host/service",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AlertType"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Principal": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/models.PrincipalType"
                },
                "uid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.PrincipalType": {
            "type": "string",
            "enum": [
                "user",
                "service",
                "anonymous",
                "system"
            ],
            "x-enum-varnames": [
                "PrincipalTypeUser",
                "PrincipalTypeService",
                "PrincipalTypeAnonymous",
                "PrincipalTypeSystem"
            ]
        },
        "models.Resource": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "资源元数据（如 resourceName、clusterName）",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "identifier": {
                    "description": "资源 ID",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.ResourceType"
                }
            }
        },
        "models.ResourceType": {
            "type": "string",
            "enum": [
                "cluster",
                "pod",
                "deployment",
                "service",
                "configMap",
                "secret",
                "database",
                "databaseInstance",
                "databaseUser",
                "minio",
                "redis",
                "mysql",
                "postgresql",
                "user",
                "role",
                "instance",
                "scheduledTask",
                "host",
                "docker_instance",
                "docker_container",
                "docker_image",
                "docker_network",
                "docker_volume",
                "docker_system",
                "docker_recording"
            ],
            "x-enum-varnames": [
                "ResourceTypeCluster",
                "ResourceTypePod",
                "ResourceTypeDeployment",
                "ResourceTypeService",
                "ResourceTypeConfigMap",
                "ResourceTypeSecret",
                "ResourceTypeDatabase",
                "ResourceTypeDatabaseInstance",
                "ResourceTypeDatabaseUser",
                "ResourceTypeMinIO",
                "ResourceTypeRedis",
                "ResourceTypeMySQL",
                "ResourceTypePostgreSQL",
                "ResourceTypeUser",
                "ResourceTypeRole",
                "ResourceTypeInstance",
                "ResourceTypeScheduledTask",
                "ResourceTypeHost",
                "ResourceTypeDockerInstance",
                "ResourceTypeDockerContainer",
                "ResourceTypeDockerImage",
                "ResourceTypeDockerNetwork",
                "ResourceTypeDockerVolume",
                "ResourceTypeDockerSystem",
                "ResourceTypeDockerRecording"
            ]
        },
        "models.ScheduledTask": {
            "type": "object",
            "properties": {
                "consecutive_failures": {
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "cron_expr": {
                    "description": "For recurring tasks",
                    "type": "string"
                },
                "data": {
                    "description": "Task input data (JSON string)",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Control flags",
                    "type": "boolean"
                },
                "failure_executions": {
                    "type": "integer"
                },
                "interval": {
                    "description": "Interval in seconds (for non-cron tasks)",
                    "type": "integer"
                },
                "is_recurring": {
                    "description": "Scheduling configuration",
                    "type": "boolean"
                },
                "labels": {
                    "description": "Metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "last_executed_at": {
                    "type": "string"
                },
                "last_failure_error": {
                    "type": "string"
                },
                "max_concurrent": {
                    "description": "Maximum concurrent executions",
                    "type": "integer"
                },
                "max_duration_seconds": {
                    "description": "Execution constraints",
                    "type": "integer"
                },
                "max_retries": {
                    "description": "Maximum retry count",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "next_run": {
                    "type": "string"
                },
                "priority": {
                    "description": "Task priority",
                    "type": "integer"
                },
                "success_executions": {
                    "type": "integer"
                },
                "timeout_grace_period": {
                    "description": "Grace period in seconds",
                    "type": "integer"
                },
                "total_executions": {
                    "description": "Statistics (computed fields)",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.SubsystemType": {
            "type": "string",
            "enum": [
                "http",
                "minio",
                "database",
                "middleware",
                "kubernetes",
                "docker",
                "host",
                "webssh",
                "scheduler",
                "alert",
                "auth",
                "storage",
                "webserver"
            ],
            "x-enum-varnames": [
                "SubsystemHTTP",
                "SubsystemMinIO",
                "SubsystemDatabase",
                "SubsystemMiddleware",
                "SubsystemKubernetes",
                "SubsystemDocker",
                "SubsystemHost",
                "SubsystemWebSSH",
                "SubsystemScheduler",
                "SubsystemAlert",
                "SubsystemAuth",
                "SubsystemStorage",
                "SubsystemWebServer"
            ]
        },
        "models.TaskExecution": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "时间戳",
                    "type": "string"
                },
                "duration_ms": {
                    "description": "执行指标",
                    "type": "integer"
                },
                "error_message": {
                    "description": "错误信息",
                    "type": "string"
                },
                "error_stack": {
                    "description": "错误堆栈",
                    "type": "string"
                },
                "execution_uid": {
                    "description": "执行上下文",
                    "type": "string"
                },
                "finished_at": {
                    "description": "实际结束时间",
                    "type": "string"
                },
                "id": {
                    "description": "基础字段",
                    "type": "integer"
                },
                "progress": {
                    "description": "进度（0-100）",
                    "type": "integer"
                },
                "result": {
                    "description": "执行结果数据",
                    "type": "string"
                },
                "retry_count": {
                    "description": "重试次数",
                    "type": "integer"
                },
                "run_by": {
                    "description": "实例 ID",
                    "type": "string"
                },
                "scheduled_at": {
                    "description": "计划执行时间",
                    "type": "string"
                },
                "started_at": {
                    "description": "实际开始时间",
                    "type": "string"
                },
                "state": {
                    "description": "执行结果",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ExecutionState"
                        }
                    ]
                },
                "task_name": {
                    "type": "string"
                },
                "task_type": {
                    "type": "string"
                },
                "task_uid": {
                    "type": "string"
                },
                "trigger_by": {
                    "description": "手动触发的用户 ID",
                    "type": "string"
                },
                "trigger_type": {
                    "description": "触发方式",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "scheduler.TriggerTaskRequest": {
            "type": "object",
            "properties": {
                "override_data": {
                    "description": "JSON string to override task input data",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Instance management operations",
            "name": "instances"
        },
        {
            "description": "MinIO object storage operations",
            "name": "minio"
        },
        {
            "description": "Alert rules and events management",
            "name": "alerts"
        },
        {
            "description": "Audit log operations",
            "name": "audit"
        },
        {
            "description": "Database management operations",
            "name": "database"
        },
        {
            "description": "Docker container operations",
            "name": "docker"
        },
        {
            "description": "Authentication operations",
            "name": "auth"
        },
        {
            "description": "User management operations",
            "name": "users"
        }
    ]
}