// Code generated by spec-kit:implement; DO NOT EDIT.
// This file was generated at 2025-10-29 22:15:00
// Source: .claude/specs/010-k8s-pod-009/tasks.md (task: T036)

package k8sservice

import (
	"context"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"

	"github.com/ysicing/tiga/internal/models"
	"github.com/ysicing/tiga/internal/repository"
)

type MockTerminalRecordingRepository struct {
	mock.Mock
}

func (m *MockTerminalRecordingRepository) Create(ctx context.Context, recording *models.TerminalRecording) error {
	return m.Called(ctx, recording).Error(0)
}

func (m *MockTerminalRecordingRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.TerminalRecording, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*models.TerminalRecording), args.Error(1)
}

func (m *MockTerminalRecordingRepository) Update(ctx context.Context, recording *models.TerminalRecording) error {
	return m.Called(ctx, recording).Error(0)
}

func (m *MockTerminalRecordingRepository) Delete(ctx context.Context, id uuid.UUID) error {
	return m.Called(ctx, id).Error(0)
}

func (m *MockTerminalRecordingRepository) List(ctx context.Context, filter *repository.TerminalRecordingFilter) ([]*models.TerminalRecording, int64, error) {
	args := m.Called(ctx, filter)
	return args.Get(0).([]*models.TerminalRecording), args.Get(1).(int64), args.Error(2)
}

func (m *MockTerminalRecordingRepository) ListByUser(ctx context.Context, userID uuid.UUID, limit, offset int) ([]*models.TerminalRecording, int64, error) {
	args := m.Called(ctx, userID, limit, offset)
	return args.Get(0).([]*models.TerminalRecording), args.Get(1).(int64), args.Error(2)
}

func (m *MockTerminalRecordingRepository) ListByInstance(ctx context.Context, instanceID uuid.UUID, limit, offset int) ([]*models.TerminalRecording, int64, error) {
	args := m.Called(ctx, instanceID, limit, offset)
	return args.Get(0).([]*models.TerminalRecording), args.Get(1).(int64), args.Error(2)
}

func (m *MockTerminalRecordingRepository) DeleteOlderThan(ctx context.Context, before time.Time) (int64, error) {
	args := m.Called(ctx, before)
	return args.Get(0).(int64), args.Error(1)
}

func (m *MockTerminalRecordingRepository) FindExpired(ctx context.Context, retentionDays int, limit int) ([]*models.TerminalRecording, error) {
	args := m.Called(ctx, retentionDays, limit)
	return args.Get(0).([]*models.TerminalRecording), args.Error(1)
}

func (m *MockTerminalRecordingRepository) FindInvalid(ctx context.Context, limit int) ([]*models.TerminalRecording, error) {
	args := m.Called(ctx, limit)
	return args.Get(0).([]*models.TerminalRecording), args.Error(1)
}

func (m *MockTerminalRecordingRepository) GetStatistics(ctx context.Context) (*repository.TerminalRecordingStatistics, error) {
	args := m.Called(ctx)
	return args.Get(0).(*repository.TerminalRecordingStatistics), args.Error(1)
}

type MockAuditEventRepository struct {
	mock.Mock
}

func (m *MockAuditEventRepository) Create(ctx context.Context, event *models.AuditEvent) error {
	return m.Called(ctx, event).Error(0)
}

func (m *MockAuditEventRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.AuditEvent, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*models.AuditEvent), args.Error(1)
}

func (m *MockAuditEventRepository) Update(ctx context.Context, event *models.AuditEvent) error {
	return m.Called(ctx, event).Error(0)
}

func (m *MockAuditEventRepository) Delete(ctx context.Context, id uuid.UUID) error {
	return m.Called(ctx, id).Error(0)
}

func (m *MockAuditEventRepository) List(ctx context.Context, filter *repository.AuditEventFilter) ([]*models.AuditEvent, int64, error) {
	args := m.Called(ctx, filter)
	return args.Get(0).([]*models.AuditEvent), args.Get(1).(int64), args.Error(2)
}

func (m *MockAuditEventRepository) ListByUser(ctx context.Context, userID uuid.UUID, limit, offset int) ([]*models.AuditEvent, int64, error) {
	args := m.Called(ctx, userID, limit, offset)
	return args.Get(0).([]*models.AuditEvent), args.Get(1).(int64), args.Error(2)
}

func (m *MockAuditEventRepository) DeleteOlderThan(ctx context.Context, before time.Time) (int64, error) {
	args := m.Called(ctx, before)
	return args.Get(0).(int64), args.Error(1)
}

func (m *MockAuditEventRepository) FindExpired(ctx context.Context, retentionDays int, limit int) ([]*models.AuditEvent, error) {
	args := m.Called(ctx, retentionDays, limit)
	return args.Get(0).([]*models.AuditEvent), args.Error(1)
}

func (m *MockAuditEventRepository) GetStatistics(ctx context.Context, filter *repository.AuditEventFilter) (*repository.AuditEventStatistics, error) {
	args := m.Called(ctx, filter)
	return args.Get(0).(*repository.AuditEventStatistics), args.Error(1)
}

func TestK8sCleanupService_CleanupExpiredRecordings(t *testing.T) {
	ctx := context.Background()
	mockRecordingRepo := new(MockTerminalRecordingRepository)
	mockAuditRepo := new(MockAuditEventRepository)

	service := NewK8sCleanupService(mockRecordingRepo, mockAuditRepo, 90)

	// Create test recordings
	expiredK8sNodeRecording := &models.TerminalRecording{
		ID:              uuid.New(),
		RecordingType:   models.RecordingTypeK8sNode,
		FilePath:        "/tmp/test_node.cast",
		StartTime:       time.Now().AddDate(0, 0, -100),
		EndTime:         time.Now().AddDate(0, 0, -100),
		DurationSeconds: 3600,
		Status:          "stopped",
	}

	expiredK8sPodRecording := &models.TerminalRecording{
		ID:              uuid.New(),
		RecordingType:   models.RecordingTypeK8sPod,
		FilePath:        "/tmp/test_pod.cast",
		StartTime:       time.Now().AddDate(0, 0, -100),
		EndTime:         time.Now().AddDate(0, 0, -100),
		DurationSeconds: 3600,
		Status:          "stopped",
	}

	activeRecording := &models.TerminalRecording{
		ID:              uuid.New(),
		RecordingType:   models.RecordingTypeDocker,
		FilePath:        "/tmp/test_docker.cast",
		StartTime:       time.Now(),
		EndTime:         time.Now(),
		DurationSeconds: 3600,
		Status:          "active",
	}

	mockRecordingRepo.On("FindExpired", ctx, 90, 1000).Return([]*models.TerminalRecording{
		expiredK8sNodeRecording,
		expiredK8sPodRecording,
		activeRecording,
	}, nil)

	mockRecordingRepo.On("Delete", ctx, expiredK8sNodeRecording.ID).Return(nil)
	mockRecordingRepo.On("Delete", ctx, expiredK8sPodRecording.ID).Return(nil)

	// Create temp files for testing
	os.Create(expiredK8sNodeRecording.FilePath)
	os.Create(expiredK8sPodRecording.FilePath)
	defer func() {
		os.Remove(expiredK8sNodeRecording.FilePath)
		os.Remove(expiredK8sPodRecording.FilePath)
	}()

	deletedCount, err := service.CleanupExpiredRecordings(ctx)
	assert.NoError(t, err)
	assert.Equal(t, 2, deletedCount)

	mockRecordingRepo.AssertExpectations(t)
}

func TestK8sCleanupService_CleanupExpiredAuditEvents(t *testing.T) {
	ctx := context.Background()
	mockRecordingRepo := new(MockTerminalRecordingRepository)
	mockAuditRepo := new(MockAuditEventRepository)

	service := NewK8sCleanupService(mockRecordingRepo, mockAuditRepo, 90)

	// Create test audit events
	expiredK8sEvent := &models.AuditEvent{
		ID:         uuid.New(),
		Subsystem:  models.SubsystemKubernetes,
		Action:     models.ActionCreateResource,
		Timestamp:  time.Now().AddDate(0, 0, -100).UnixMilli(),
		UserID:     "test-user",
		Username:   "test",
		ClientIP:   "127.0.0.1",
	}

	expiredDockerEvent := &models.AuditEvent{
		ID:         uuid.New(),
		Subsystem:  models.SubsystemDocker,
		Action:     models.ActionCreated,
		Timestamp:  time.Now().AddDate(0, 0, -100).UnixMilli(),
		UserID:     "test-user",
		Username:   "test",
		ClientIP:   "127.0.0.1",
	}

	mockAuditRepo.On("FindExpired", ctx, 90, 1000).Return([]*models.AuditEvent{
		expiredK8sEvent,
		expiredDockerEvent,
	}, nil)

	mockAuditRepo.On("Delete", ctx, expiredK8sEvent.ID).Return(nil)

	deletedCount, err := service.CleanupExpiredAuditEvents(ctx)
	assert.NoError(t, err)
	assert.Equal(t, 1, deletedCount)

	mockAuditRepo.AssertExpectations(t)
}

func TestK8sCleanupService_RunCleanup(t *testing.T) {
	ctx := context.Background()
	mockRecordingRepo := new(MockTerminalRecordingRepository)
	mockAuditRepo := new(MockAuditEventRepository)

	service := NewK8sCleanupService(mockRecordingRepo, mockAuditRepo, 90)

	// Mock the individual cleanup methods
	mockRecordingRepo.On("FindExpired", ctx, 90, 1000).Return([]*models.TerminalRecording{}, nil)
	mockAuditRepo.On("FindExpired", ctx, 90, 1000).Return([]*models.AuditEvent{}, nil)

	// Create temp directory for testing
	tmpDir := "/tmp/test_recordings"
	os.MkdirAll(filepath.Join(tmpDir, "k8s_node", "2025-10-01"), 0755)
	defer os.RemoveAll(tmpDir)

	result, err := service.RunCleanup(ctx)
	assert.NoError(t, err)
	assert.Equal(t, CleanupResult{RecordingsDeleted: 0, AuditEventsDeleted: 0, FilesDeleted: 0}, result)
}
