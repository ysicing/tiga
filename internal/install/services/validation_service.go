package services

import (
	"fmt"
	"regexp"

	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"

	"github.com/ysicing/tiga/internal/install/models"

	mainmodels "github.com/ysicing/tiga/internal/models"
)

// T021: 验证服务

// ValidationService 验证服务
type ValidationService struct{}

// NewValidationService 创建验证服务
func NewValidationService() *ValidationService {
	return &ValidationService{}
}

// ValidateAdmin 验证管理员账户
func (s *ValidationService) ValidateAdmin(admin models.AdminAccount) map[string]string {
	errors := make(map[string]string)

	// 验证用户名
	if len(admin.Username) < 3 {
		errors["username"] = "Username must be at least 3 characters"
	}
	if len(admin.Username) > 20 {
		errors["username"] = "Username must be at most 20 characters"
	}
	matched, _ := regexp.MatchString(`^[a-zA-Z0-9_]+$`, admin.Username)
	if !matched {
		errors["username"] = "Username must contain only letters, numbers, and underscores"
	}

	// 验证密码
	if len(admin.Password) < 8 {
		errors["password"] = "Password must be at least 8 characters"
	}
	if !regexp.MustCompile(`[a-z]`).MatchString(admin.Password) {
		errors["password"] = "Password must contain at least one lowercase letter"
	}
	if !regexp.MustCompile(`[A-Z]`).MatchString(admin.Password) {
		errors["password"] = "Password must contain at least one uppercase letter"
	}
	if !regexp.MustCompile(`[0-9]`).MatchString(admin.Password) {
		errors["password"] = "Password must contain at least one number"
	}

	// 验证邮箱
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}$`)
	if !emailRegex.MatchString(admin.Email) {
		errors["email"] = "Invalid email format"
	}

	return errors
}

// ValidateSettings 验证系统设置
func (s *ValidationService) ValidateSettings(settings models.SystemSettings) map[string]string {
	errors := make(map[string]string)

	// 验证应用名称
	if len(settings.AppName) < 1 {
		errors["app_name"] = "App name is required"
	}
	if len(settings.AppName) > 50 {
		errors["app_name"] = "App name must be at most 50 characters"
	}

	// 验证端口
	if settings.HTTPPort < 1 || settings.HTTPPort > 65535 {
		errors["http_port"] = "Port must be between 1 and 65535"
	}
	if settings.GRPCPort != 0 && (settings.GRPCPort < 1 || settings.GRPCPort > 65535) {
		errors["grpc_port"] = "Port must be between 1 and 65535"
	}

	// 验证语言
	if settings.Language != "zh-CN" && settings.Language != "en-US" {
		errors["language"] = "Language must be 'zh-CN' or 'en-US'"
	}

	return errors
}

// ValidateDatabase 验证数据库配置
func (s *ValidationService) ValidateDatabase(db models.DatabaseConfig) map[string]string {
	errors := make(map[string]string)

	// 验证数据库类型
	if db.Type != "mysql" && db.Type != "postgresql" && db.Type != "sqlite" {
		errors["type"] = "Database type must be 'mysql', 'postgresql', or 'sqlite'"
	}

	// MySQL 和 PostgreSQL 需要主机和用户名
	if db.Type != "sqlite" {
		if db.Host == "" {
			errors["host"] = "Host is required for MySQL/PostgreSQL"
		}
		if db.Username == "" {
			errors["username"] = "Username is required for MySQL/PostgreSQL"
		}
		if db.Port < 1 || db.Port > 65535 {
			errors["port"] = "Port must be between 1 and 65535"
		}
	}

	// 数据库名必填
	if db.Database == "" {
		errors["database"] = "Database name is required"
	}

	return errors
}

// CreateAdminAccount 创建管理员账户
func (s *ValidationService) CreateAdminAccount(db *gorm.DB, admin models.AdminAccount) error {
	// 验证
	if errors := s.ValidateAdmin(admin); len(errors) > 0 {
		return fmt.Errorf("validation failed: %v", errors)
	}

	// 检查用户名是否已存在
	var count int64
	if err := db.Model(&mainmodels.User{}).Where("username = ?", admin.Username).Count(&count).Error; err != nil {
		return fmt.Errorf("failed to check existing user: %w", err)
	}
	if count > 0 {
		return fmt.Errorf("username already exists")
	}

	// 哈希密码
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(admin.Password), bcrypt.DefaultCost)
	if err != nil {
		return fmt.Errorf("failed to hash password: %w", err)
	}

	// 创建管理员用户 (UUID will be auto-generated by BeforeCreate hook)
	user := mainmodels.User{
		Username:    admin.Username,
		Email:       admin.Email,
		Password:    string(hashedPassword),
		IsAdmin:     true,
		AuthType:    "local",
		Status:      "active",
		Enabled:     true,
		Metadata:    mainmodels.JSONB{},
		Preferences: mainmodels.JSONB{},
	}

	if err := db.Create(&user).Error; err != nil {
		return fmt.Errorf("failed to create admin account: %w", err)
	}

	// 查找并分配 admin 角色
	var adminRole mainmodels.Role
	if err := db.Where("name = ?", "admin").First(&adminRole).Error; err != nil {
		// 如果找不到 admin 角色，记录警告但不失败（向后兼容）
		if err == gorm.ErrRecordNotFound {
			fmt.Printf("Warning: admin role not found, skipping role assignment\n")
			return nil
		}
		return fmt.Errorf("failed to find admin role: %w", err)
	}

	// 创建用户角色关联
	userRole := mainmodels.UserRole{
		UserID:    user.ID,
		RoleID:    adminRole.ID,
		GrantedAt: user.CreatedAt,
	}

	if err := db.Create(&userRole).Error; err != nil {
		return fmt.Errorf("failed to assign admin role: %w", err)
	}

	return nil
}
