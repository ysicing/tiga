// Code generated by spec-kit:implement; DO NOT EDIT.
// This file was generated at 2025-10-29 22:15:00
// Source: .claude/specs/010-k8s-pod-009/tasks.md (task: T033)

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';

interface K8sAuditEvent {
  id: string;
  timestamp: number;
  action: string;
  resource_type: string;
  subsystem: string;
  user_id: string;
  username: string;
  client_ip: string;
  cluster_id?: string;
  namespace?: string;
  resource_name?: string;
  details?: any;
}

interface Pagination {
  page: number;
  page_size: number;
  total: number;
  total_page: number;
}

export const K8sAuditLogList: React.FC = () => {
  const [filters, setFilters] = useState({
    user_id: '',
    cluster_id: '',
    namespace: '',
    action: '',
    resource_type: '',
    start_time: '',
    end_time: '',
  });
  const [pagination, setPagination] = useState({
    page: 1,
    page_size: 20,
  });

  const { data, isLoading, error } = useQuery({
    queryKey: ['k8s-audit-events', filters, pagination],
    queryFn: async () => {
      const params = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value);
      });
      params.append('page', pagination.page.toString());
      params.append('page_size', pagination.page_size.toString());

      const response = await fetch(`/api/v1/audit/k8s?${params}`);
      if (!response.ok) {
        throw new Error('Failed to fetch audit events');
      }
      return response.json();
    },
  });

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  const handlePageChange = (newPage: number) => {
    setPagination(prev => ({ ...prev, page: newPage }));
  };

  if (isLoading) {
    return <div className="p-4">加载中...</div>;
  }

  if (error) {
    return <div className="p-4 text-red-500">加载失败</div>;
  }

  const events: K8sAuditEvent[] = data?.data || [];
  const paginationData: Pagination = data?.pagination;

  const getActionColor = (action: string) => {
    if (action.includes('Create') || action === 'CreateResource') {
      return 'bg-green-100 text-green-800';
    }
    if (action.includes('Update') || action === 'UpdateResource') {
      return 'bg-blue-100 text-blue-800';
    }
    if (action.includes('Delete') || action === 'DeleteResource') {
      return 'bg-red-100 text-red-800';
    }
    if (action.includes('View') || action === 'ViewResource') {
      return 'bg-gray-100 text-gray-800';
    }
    return 'bg-yellow-100 text-yellow-800';
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-6">K8s 审计日志</h2>

      {/* 筛选器 */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
          <input
            type="text"
            placeholder="用户 ID"
            className="px-3 py-2 border rounded"
            value={filters.user_id}
            onChange={(e) => handleFilterChange('user_id', e.target.value)}
          />
          <input
            type="text"
            placeholder="集群 ID"
            className="px-3 py-2 border rounded"
            value={filters.cluster_id}
            onChange={(e) => handleFilterChange('cluster_id', e.target.value)}
          />
          <input
            type="text"
            placeholder="命名空间"
            className="px-3 py-2 border rounded"
            value={filters.namespace}
            onChange={(e) => handleFilterChange('namespace', e.target.value)}
          />
          <input
            type="text"
            placeholder="操作类型"
            className="px-3 py-2 border rounded"
            value={filters.action}
            onChange={(e) => handleFilterChange('action', e.target.value)}
          />
          <input
            type="text"
            placeholder="资源类型"
            className="px-3 py-2 border rounded"
            value={filters.resource_type}
            onChange={(e) => handleFilterChange('resource_type', e.target.value)}
          />
          <input
            type="datetime-local"
            placeholder="开始时间"
            className="px-3 py-2 border rounded"
            value={filters.start_time}
            onChange={(e) => handleFilterChange('start_time', e.target.value)}
          />
          <input
            type="datetime-local"
            placeholder="结束时间"
            className="px-3 py-2 border rounded"
            value={filters.end_time}
            onChange={(e) => handleFilterChange('end_time', e.target.value)}
          />
        </div>
      </div>

      {/* 审计事件列表 */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">时间</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">操作</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">资源类型</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">用户</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">集群/命名空间</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">客户端 IP</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">操作</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {events.map((event) => (
              <tr key={event.id}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {formatDistanceToNow(new Date(event.timestamp), {
                    addSuffix: true,
                    locale: zhCN
                  })}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`px-2 py-1 text-xs font-semibold rounded ${getActionColor(event.action)}`}>
                    {event.action}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {event.resource_type}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {event.username || event.user_id}
                </td>
                <td className="px-6 py-4 text-sm text-gray-500">
                  {event.cluster_id}
                  {event.namespace && ` / ${event.namespace}`}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {event.client_ip}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    onClick={() => window.location.href = `/audit/${event.id}`}
                    className="text-blue-600 hover:text-blue-900"
                  >
                    详情
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* 分页 */}
        {paginationData && (
          <div className="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
            <div className="flex items-center justify-between">
              <div className="text-sm text-gray-700">
                显示第 {(paginationData.page - 1) * paginationData.page_size + 1} 到{' '}
                {Math.min(paginationData.page * paginationData.page_size, paginationData.total)} 条，
                共 {paginationData.total} 条
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => handlePageChange(paginationData.page - 1)}
                  disabled={paginationData.page === 1}
                  className="px-3 py-1 border rounded disabled:opacity-50"
                >
                  上一页
                </button>
                <span className="px-3 py-1">
                  {paginationData.page} / {paginationData.total_page}
                </span>
                <button
                  onClick={() => handlePageChange(paginationData.page + 1)}
                  disabled={paginationData.page === paginationData.total_page}
                  className="px-3 py-1 border rounded disabled:opacity-50"
                >
                  下一页
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
