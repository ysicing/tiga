import { describe, it, expect } from 'vitest'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { AdminStep } from '@/pages/install/steps/admin-step'

// T014: AdminStep 组件测试

describe('AdminStep', () => {
  it('renders all admin account fields', () => {
    render(<AdminStep />)

    expect(screen.getByLabelText(/username/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/^password$/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/confirm password/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument()
  })

  it('validates username length', async () => {
    render(<AdminStep />)

    const usernameInput = screen.getByLabelText(/username/i)
    fireEvent.change(usernameInput, { target: { value: 'ad' } })
    fireEvent.blur(usernameInput)

    await waitFor(() => {
      expect(screen.getByText(/at least 3 characters/i)).toBeInTheDocument()
    })
  })

  it('validates password strength', async () => {
    render(<AdminStep />)

    const passwordInput = screen.getByLabelText(/^password$/i)
    fireEvent.change(passwordInput, { target: { value: 'admin123' } })
    fireEvent.blur(passwordInput)

    await waitFor(() => {
      expect(screen.getByText(/uppercase letter/i)).toBeInTheDocument()
    })
  })

  it('validates password confirmation match', async () => {
    render(<AdminStep />)

    const passwordInput = screen.getByLabelText(/^password$/i)
    const confirmInput = screen.getByLabelText(/confirm password/i)

    fireEvent.change(passwordInput, { target: { value: 'Admin123!' } })
    fireEvent.change(confirmInput, { target: { value: 'Admin123' } })
    fireEvent.blur(confirmInput)

    await waitFor(() => {
      expect(screen.getByText(/passwords do not match/i)).toBeInTheDocument()
    })
  })

  it('validates email format', async () => {
    render(<AdminStep />)

    const emailInput = screen.getByLabelText(/email/i)
    fireEvent.change(emailInput, { target: { value: 'admin@' } })
    fireEvent.blur(emailInput)

    await waitFor(() => {
      expect(screen.getByText(/invalid email format/i)).toBeInTheDocument()
    })
  })

  it('enables next button only when all fields valid', async () => {
    render(<AdminStep />)

    const nextButton = screen.getByRole('button', { name: /next/i })
    expect(nextButton).toBeDisabled()

    // 填写有效数据
    fireEvent.change(screen.getByLabelText(/username/i), { target: { value: 'admin' } })
    fireEvent.change(screen.getByLabelText(/^password$/i), { target: { value: 'Admin123!' } })
    fireEvent.change(screen.getByLabelText(/confirm password/i), { target: { value: 'Admin123!' } })
    fireEvent.change(screen.getByLabelText(/email/i), { target: { value: 'admin@example.com' } })

    await waitFor(() => {
      expect(nextButton).not.toBeDisabled()
    })
  })

  it('shows password strength indicator', async () => {
    render(<AdminStep />)

    const passwordInput = screen.getByLabelText(/^password$/i)

    // 弱密码
    fireEvent.change(passwordInput, { target: { value: 'admin' } })
    await waitFor(() => {
      expect(screen.getByText(/weak/i)).toBeInTheDocument()
    })

    // 强密码
    fireEvent.change(passwordInput, { target: { value: 'Admin123!' } })
    await waitFor(() => {
      expect(screen.getByText(/strong/i)).toBeInTheDocument()
    })
  })
})
