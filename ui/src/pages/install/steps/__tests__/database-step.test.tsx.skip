import { describe, it, expect, vi } from 'vitest'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { DatabaseStep } from '@/pages/install/steps/database-step'

// T013: DatabaseStep 组件测试

describe('DatabaseStep', () => {
  it('renders database type selection', () => {
    render(<DatabaseStep />)

    expect(screen.getByLabelText(/database type/i)).toBeInTheDocument()
    expect(screen.getByRole('combobox')).toBeInTheDocument()
  })

  it('shows PostgreSQL fields when selected', async () => {
    render(<DatabaseStep />)

    const typeSelect = screen.getByRole('combobox')
    fireEvent.change(typeSelect, { target: { value: 'postgresql' } })

    await waitFor(() => {
      expect(screen.getByLabelText(/host/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/port/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/database/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/username/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/password/i)).toBeInTheDocument()
    })
  })

  it('hides host/port for SQLite', async () => {
    render(<DatabaseStep />)

    const typeSelect = screen.getByRole('combobox')
    fireEvent.change(typeSelect, { target: { value: 'sqlite' } })

    await waitFor(() => {
      expect(screen.queryByLabelText(/host/i)).not.toBeInTheDocument()
      expect(screen.queryByLabelText(/port/i)).not.toBeInTheDocument()
      expect(screen.getByLabelText(/database/i)).toBeInTheDocument()
    })
  })

  it('validates required fields', async () => {
    render(<DatabaseStep />)

    const submitButton = screen.getByRole('button', { name: /next/i })
    fireEvent.click(submitButton)

    await waitFor(() => {
      expect(screen.getByText(/database is required/i)).toBeInTheDocument()
    })
  })

  it('calls testConnection API when button clicked', async () => {
    const mockTestConnection = vi.fn().mockResolvedValue({ success: true })

    render(<DatabaseStep onTestConnection={mockTestConnection} />)

    // 填写表单
    fireEvent.change(screen.getByLabelText(/database/i), { target: { value: 'tiga_test' } })
    fireEvent.change(screen.getByLabelText(/host/i), { target: { value: '127.0.0.1' } })

    const testButton = screen.getByRole('button', { name: /test connection/i })
    fireEvent.click(testButton)

    await waitFor(() => {
      expect(mockTestConnection).toHaveBeenCalled()
    })
  })

  it('shows success message on connection test success', async () => {
    const mockTestConnection = vi.fn().mockResolvedValue({ success: true })

    render(<DatabaseStep onTestConnection={mockTestConnection} />)

    const testButton = screen.getByRole('button', { name: /test connection/i })
    fireEvent.click(testButton)

    await waitFor(() => {
      expect(screen.getByText(/connection successful/i)).toBeInTheDocument()
    })
  })

  it('shows error message on connection test failure', async () => {
    const mockTestConnection = vi.fn().mockResolvedValue({
      success: false,
      error: 'connection refused'
    })

    render(<DatabaseStep onTestConnection={mockTestConnection} />)

    const testButton = screen.getByRole('button', { name: /test connection/i })
    fireEvent.click(testButton)

    await waitFor(() => {
      expect(screen.getByText(/connection refused/i)).toBeInTheDocument()
    })
  })
})
